
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BTYD2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('BTYD2')
Loading required package: hypergeo
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bgbb.ConditionalExpectedTransactions")
> ### * bgbb.ConditionalExpectedTransactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.ConditionalExpectedTransactions
> ### Title: BG/BB Conditional Expected Transactions
> ### Aliases: bgbb.ConditionalExpectedTransactions
> 
> ### ** Examples
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> # the number of transactions a customer is expected
> # to make in the 10 transaction opportunities
> # following the calibration period, which consisted
> # of 6 transaction opportunities (during which they
> # made 3 transactions, the last of which occurred
> # in the 4th opportunity)
> bgbb.ConditionalExpectedTransactions(params, n.cal=6, n.star=10, x=3, t.x=4)
[1] 1.840813
> 
> # We can also use vectors as input:
> bgbb.ConditionalExpectedTransactions(params, n.cal=6, n.star=1:10, x=3, t.x=4)
 [1] 0.2315779 0.4485158 0.6529380 0.8465147 1.0305855 1.2062430 1.3743918
 [8] 1.5357901 1.6910805 1.8408127
> bgbb.ConditionalExpectedTransactions(params, n.cal=6, n.star=10, x=1:4, t.x=4)
[1] 1.494157 1.882662 1.840813 1.036817
> 
> 
> 
> cleanEx()
> nameEx("bgbb.DERT")
> ### * bgbb.DERT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.DERT
> ### Title: BG/BB Discounted Expected Residual Transactions
> ### Aliases: bgbb.DERT bgbb.rf.matrix.DERT
> 
> ### ** Examples
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> # Compute DERT for a customer who made 3 transactions
> # in the calibration period(consisting of 6 transaction
> # opportunities), with the last transaction occurring
> # during the 4th transaction opportunity, discounted at
> # 10%.
> bgbb.DERT(params, x=3, t.x=4, n.cal=6, d=0.1)
[1] 1.621379
> 
> # We can also compare DERT for several customers:
> bgbb.DERT(params, x=1:6, t.x=6, n.cal=6, d=0.1)
[1] 1.802045 2.621156 3.440267 4.259379 5.078490 5.897601
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # compute DERT for a customer from every row in rf.matrix,
> # discounted at 10%.
> bgbb.rf.matrix.DERT(est.params, rf.matrix, d=0.1)
 [1] 5.9101923 5.0897527 4.2693131 3.4488735 2.6284340 1.8079944 2.8555569
 [8] 3.1973704 2.8424727 2.2728613 1.6092434 0.9186269 1.6295372 1.6658027
[15] 1.3221297 0.3521970 0.8444216 0.9353782 0.1876273 0.4949475 0.1349714
[22] 0.1147538
> 
> 
> 
> cleanEx()
> nameEx("bgbb.EstimateParameters")
> ### * bgbb.EstimateParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.EstimateParameters
> ### Title: BG/BB Parameter Estimation
> ### Aliases: bgbb.EstimateParameters
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> # log-likelihood of estimated parameters
> bgbb.rf.matrix.LL(est.params, rf.matrix)
[1] -33225.58
> 
> 
> 
> cleanEx()
> nameEx("bgbb.Expectation")
> ### * bgbb.Expectation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.Expectation
> ### Title: BG/BB Expectation
> ### Aliases: bgbb.Expectation
> 
> ### ** Examples
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> # Expected number of transactions that a randomly chosen customer
> # will make in the first 10 transaction opportunities.
> bgbb.Expectation(params, n=10)
[1] 3.16499
> 
> # We can also compare expected transactions over time:
> bgbb.Expectation(params, n=1:10)
 [1] 0.4973166 0.9207078 1.2927317 1.6266289 1.9309062 2.2113893 2.4722624
 [8] 2.7166434 2.9469256 3.1649902
> 
> 
> 
> cleanEx()
> nameEx("bgbb.HeatmapHoldoutExpectedTrans")
> ### * bgbb.HeatmapHoldoutExpectedTrans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.HeatmapHoldoutExpectedTrans
> ### Title: BG/BB Heatmap of Holdout Period Expected Transactions
> ### Aliases: bgbb.HeatmapHoldoutExpectedTrans
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # Plot a heatmap of conditional expected transactions in
> # a holdout period of 5 transaction opportunities, given
> # that the calibration period consisted of 6 transaction
> # opportunities.
> bgbb.HeatmapHoldoutExpectedTrans(est.params, n.cal=6, n.star=5)
layout: widths =  0.05 4 , heights =  0.25 4 ; lmat=
     [,1] [,2]
[1,]    0    3
[2,]    2    1
          0          1         2         3         4        5        6
0 0.0728617 0.00000000 0.0000000 0.0000000 0.0000000 0.000000 0.000000
1 0.0000000 0.08569864 0.3142616 0.5939084 0.8394721 1.021772 1.147967
2 0.0000000 0.00000000 0.1191319 0.5361565 1.0576836 1.443129 1.668896
3 0.0000000 0.00000000 0.0000000 0.2236237 1.0346572 1.804798 2.189825
4 0.0000000 0.00000000 0.0000000 0.0000000 0.5832723 2.030136 2.710755
5 0.0000000 0.00000000 0.0000000 0.0000000 0.0000000 1.813105 3.231684
6 0.0000000 0.00000000 0.0000000 0.0000000 0.0000000 0.000000 3.752613
> 
> 
> 
> cleanEx()
> nameEx("bgbb.LL")
> ### * bgbb.LL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.LL
> ### Title: BG/BB Log-Likelihood
> ### Aliases: bgbb.LL bgbb.rf.matrix.LL
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> bgbb.rf.matrix.LL(params, rf.matrix)
[1] -33225.68
> 
> # Returns the log likelihood of the parameters for a customer who
> # made 3 transactions in a calibration period with 6 transaction opportunities,
> # with the last transaction occurring during the 4th transaction opportunity.
> bgbb.LL(params, x=3, t.x=4, n.cal=6)
[1] -5.060868
> 
> # We can also give vectors as function parameters:
> set.seed(7)
> x <- sample(1:3, 10, replace = TRUE)
> t.x <- sample(3:5, 10, replace = TRUE)
> n.cal <- rep(5, 10)
> bgbb.LL(params, x, t.x, n.cal)
 [1] -3.383212 -4.274305 -4.422825 -4.009181 -4.279197 -3.383212 -4.764991
 [8] -3.383212 -4.422825 -4.274305
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PAlive")
> ### * bgbb.PAlive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PAlive
> ### Title: BG/BB P(Alive)
> ### Aliases: bgbb.PAlive
> 
> ### ** Examples
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> 
> # The probability that a customer who made 3 transactions in
> # the calibration period (which consisted of 6 transaction
> # opportunities), with the last transaction occurring at the
> # 4th transaction opportunity, is alive at the 7th transaction
> # opportunity
> bgbb.PAlive(params, x=3, t.x=4, n.cal=6)
[1] 0.4383439
> 
> # The input parameters may also be vectors:
> bgbb.PAlive(params, x=1, t.x=1:6, n.cal=6)
[1] 0.06918809 0.25379563 0.48008913 0.67924778 0.82738630 0.93008475
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotDropoutRateHeterogeneity")
> ### * bgbb.PlotDropoutRateHeterogeneity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotDropoutRateHeterogeneity
> ### Title: BG/BB Plot Dropout Rate Heterogeneity
> ### Aliases: bgbb.PlotDropoutRateHeterogeneity
> 
> ### ** Examples
> 
> params <- c(1.2, 0.75, 0.66, 2.78)
> bgbb.PlotDropoutRateHeterogeneity(params)
  [1]          Inf 6.4965179162 5.0405997124 4.3120367595 3.8387726494
  [6] 3.4925948562 3.2214110821 2.9992751477 2.8115235862 2.6491174856
 [11] 2.5061188374 2.3784317461 2.2631197093 2.1580103536 2.0614542703
 [16] 1.9721713879 1.8891495066 1.8115751941 1.7387854589 1.6702331665
 [21] 1.6054617849 1.5440866083 1.4857805726 1.4302633847 1.3772930824
 [26] 1.3266594044 1.2781785260 1.2316888369 1.1870475257 1.1441277930
 [31] 1.1028165596 1.0630125692 1.0246248065 0.9875711705 0.9517773547
 [36] 0.9171758985 0.8837053771 0.8513097080 0.8199375550 0.7895418120
 [41] 0.7600791558 0.7315096565 0.7037964371 0.6769053745 0.6508048371
 [46] 0.6254654528 0.6008599037 0.5769627437 0.5537502370 0.5312002128
 [51] 0.5092919367 0.4880059944 0.4673241877 0.4472294413 0.4277057178
 [56] 0.4087379423 0.3903119329 0.3724143389 0.3550325839 0.3381548145
 [61] 0.3217698541 0.3058671600 0.2904367857 0.2754693448 0.2609559805
 [66] 0.2468883355 0.2332585268 0.2200591211 0.2072831144 0.1949239118
 [71] 0.1829753110 0.1714314868 0.1602869781 0.1495366757 0.1391758136
 [76] 0.1291999602 0.1196050131 0.1103871945 0.1015430493 0.0930694458
 [81] 0.0849635775 0.0772229694 0.0698454860 0.0628293436 0.0561731277
 [86] 0.0498758144 0.0439368001 0.0383559387 0.0331335907 0.0282706876
 [91] 0.0237688156 0.0196303294 0.0158585074 0.0124577698 0.0094339973
 [96] 0.0067950174 0.0045513953 0.0027178372 0.0013160322 0.0003818863
[101] 0.0000000000
> params <- c(0.2, 1.5, 3.2, 6)
> bgbb.PlotDropoutRateHeterogeneity(params)
  [1] 0.000000e+00 8.071149e-03 3.524973e-02 8.171181e-02 1.460991e-01
  [6] 2.265225e-01 3.208717e-01 4.269626e-01 5.426209e-01 6.657327e-01
 [11] 7.942769e-01 9.263462e-01 1.060160e+00 1.194073e+00 1.326580e+00
 [16] 1.456313e+00 1.582049e+00 1.702697e+00 1.817306e+00 1.925052e+00
 [21] 2.025235e+00 2.117275e+00 2.200707e+00 2.275172e+00 2.340411e+00
 [26] 2.396259e+00 2.442639e+00 2.479556e+00 2.507088e+00 2.525380e+00
 [31] 2.534640e+00 2.535132e+00 2.527167e+00 2.511100e+00 2.487326e+00
 [36] 2.456269e+00 2.418381e+00 2.374138e+00 2.324030e+00 2.268562e+00
 [41] 2.208247e+00 2.143601e+00 2.075142e+00 2.003384e+00 1.928837e+00
 [46] 1.851997e+00 1.773354e+00 1.693378e+00 1.612526e+00 1.531234e+00
 [51] 1.449918e+00 1.368971e+00 1.288763e+00 1.209639e+00 1.131918e+00
 [56] 1.055893e+00 9.818303e-01 9.099685e-01 8.405188e-01 7.736653e-01
 [61] 7.095649e-01 6.483479e-01 5.901183e-01 5.349550e-01 4.829118e-01
 [66] 4.340193e-01 3.882850e-01 3.456955e-01 3.062167e-01 2.697962e-01
 [71] 2.363640e-01 2.058343e-01 1.781070e-01 1.530694e-01 1.305978e-01
 [76] 1.105590e-01 9.281230e-02 7.721082e-02 6.360349e-02 5.183648e-02
 [81] 4.175489e-02 3.320431e-02 2.603229e-02 2.008981e-02 1.523259e-02
 [86] 1.132237e-02 8.228036e-03 5.826645e-03 4.004308e-03 2.656934e-03
 [91] 1.690803e-03 1.022970e-03 5.814904e-04 3.054303e-04 1.446761e-04
 [96] 5.951156e-05 1.995520e-05 4.844662e-06 6.525394e-07 2.085244e-08
[101] 0.000000e+00
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotFreqVsConditionalExpectedFrequency")
> ### * bgbb.PlotFreqVsConditionalExpectedFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotFreqVsConditionalExpectedFrequency
> ### Title: BG/BB Plot Frequency vs Conditional Expected Frequency
> ### Aliases: bgbb.PlotFreqVsConditionalExpectedFrequency
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # get the holdout period transactions
> x.star <- donationsSummary$x.star
> 
> # number of transaction opportunities in the holdout period
> n.star <- 5
> 
> # Plot holdout period transactions
> bgbb.PlotFreqVsConditionalExpectedFrequency(est.params, n.star, rf.matrix, x.star, trunc=6)
               freq.0       freq.1       freq.2      freq.3      freq.4
            0.1743649    0.4328031    0.8125874    1.389862    2.061776
            0.0728617    0.3249146    0.7090012    1.333758    2.031323
bin.size 3464.0000000 1823.0000000 1430.0000000 1085.000000 1036.000000
              freq.5      freq.6
            2.642521    3.534497
            2.784625    3.752613
bin.size 1063.000000 1203.000000
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotFrequencyInCalibration")
> ### * bgbb.PlotFrequencyInCalibration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotFrequencyInCalibration
> ### Title: BG/BB Plot Frequency in Calibration Period
> ### Aliases: bgbb.PlotFrequencyInCalibration
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # plot actual vs. expected frequencies in the calibration period
> bgbb.PlotFrequencyInCalibration(est.params, rf.matrix)
                          0        1        2        3        4        5
actual.frequency   3464.000 1823.000 1430.000 1085.000 1036.000 1063.000
expected.frequency 3454.814 1888.599 1348.864 1113.393 1017.963 1027.222
                          6
actual.frequency   1203.000
expected.frequency 1253.144
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotFrequencyInHoldout")
> ### * bgbb.PlotFrequencyInHoldout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotFrequencyInHoldout
> ### Title: BG/BB Plot Frequency in Holdout
> ### Aliases: bgbb.PlotFrequencyInHoldout
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> rf.matrix.holdout <- donationsSummary$rf.matrix.holdout
> # donationsSummary$rf.matrix and donationsSummary$rf.matrix.holdout already
> # have appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # number of periods in the calibration period
> n.cal = max(rf.matrix[,"n.cal"])
> 
> bgbb.PlotFrequencyInHoldout (est.params, n.cal, rf.matrix.holdout)
                          0        1        2        3        4        5
actual.frequency   6746.000 926.0000 772.0000 812.0000 886.0000  962.000
expected.frequency 6964.426 793.8732 745.7346 749.5204 810.3966 1040.049
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotRecVsConditionalExpectedFrequency")
> ### * bgbb.PlotRecVsConditionalExpectedFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotRecVsConditionalExpectedFrequency
> ### Title: BG/BB Plot Recency vs Conditional Expected Frequency
> ### Aliases: bgbb.PlotRecVsConditionalExpectedFrequency
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # get the holdout period transactions
> x.star <- donationsSummary$x.star
> 
> # number of transaction opportunities in the holdout period
> n.star <- 5
> 
> # Compare holdout period transactions.
> bgbb.PlotRecVsConditionalExpectedFrequency(est.params, n.star, rf.matrix, x.star, trunc=6)
                rec.0        rec.1       rec.2       rec.3       rec.4
            0.1743649 2.181485e-01   0.3898876   0.4872521   0.8088685
            0.0728617 8.569864e-02   0.1798633   0.4041656   0.8511897
bin.size 3464.0000000 1.091000e+03 890.0000000 706.0000000 654.0000000
               rec.5       rec.6
            1.652289    2.946886
            1.726479    3.027298
bin.size 1136.000000 3163.000000
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotTrackingCum")
> ### * bgbb.PlotTrackingCum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotTrackingCum
> ### Title: BG/BB Tracking Cumulative Transactions Plot
> ### Aliases: bgbb.PlotTrackingCum
> 
> ### ** Examples
> 
> data(donationsSummary)
> # donationsSummary$rf.matrix already has appropriate column names
> rf.matrix <- donationsSummary$rf.matrix
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # get the annual repeat transactions, and transform them into
> # a cumulative form
> actual.inc.repeat.transactions <- donationsSummary$annual.trans
> actual.cum.repeat.transactions <- cumsum(actual.inc.repeat.transactions)
> 
> # set appropriate x-axis
> x.tickmarks <- c( "'96","'97","'98","'99","'00","'01","'02","'03","'04","'05","'06" )
> 
> # plot actual vs. expected transactions. The calibration period was 6 periods long.
> bgbb.PlotTrackingCum(est.params, rf.matrix, actual.cum.repeat.transactions, xticklab=x.tickmarks)
             [,1]  [,2]    [,3]     [,4]     [,5]     [,6]     [,7]     [,8]
actual   5652.000 10326 14345.0 17897.00 21452.00 24615.00 27725.00 30663.00
expected 5535.886 10253 14400.7 18125.48 21521.51 24653.34 27567.31 30298.01
             [,9]    [,10]    [,11]
actual   33366.00 35939.00 37875.00
expected 32871.98 35310.08 37629.07
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotTrackingInc")
> ### * bgbb.PlotTrackingInc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotTrackingInc
> ### Title: BG/BB Tracking Incremental Transactions Plot
> ### Aliases: bgbb.PlotTrackingInc
> 
> ### ** Examples
> 
> data(donationsSummary)
> # donationsSummary$rf.matrix already has appropriate column names
> rf.matrix <- donationsSummary$rf.matrix
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # get the annual repeat transactions
> actual.inc.repeat.transactions <- donationsSummary$annual.trans
> 
> # Set appropriate x-axis
> x.tickmarks <- c( "'96","'97","'98","'99","'00","'01","'02","'03","'04","'05","'06" )
> 
> # Plot actual vs. expected transactions. The calibration period was 6 periods long.
> bgbb.PlotTrackingInc(est.params, rf.matrix, actual.inc.repeat.transactions, xticklab=x.tickmarks)
             [,1]     [,2]     [,3]    [,4]     [,5]     [,6]     [,7]     [,8]
actual   5652.000 4674.000 4019.000 3552.00 3555.000 3163.000 3110.000 2938.000
expected 5535.886 4717.111 4147.702 3724.78 3396.035 3131.821 2913.976 2730.701
             [,9]    [,10]   [,11]
actual   2703.000 2573.000 1936.00
expected 2573.966 2438.104 2318.99
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PlotTransactionRateHeterogeneity")
> ### * bgbb.PlotTransactionRateHeterogeneity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PlotTransactionRateHeterogeneity
> ### Title: BG/BB Plot Transaction Rate Heterogeneity
> ### Aliases: bgbb.PlotTransactionRateHeterogeneity
> 
> ### ** Examples
> 
> params <- c(1.2, 0.75, 0.66, 2.78)
> bgbb.PlotTransactionRateHeterogeneity(params)
  [1] 0.0000000 0.3475826 0.4002823 0.4352093 0.4621799 0.4845404 0.5038661
  [8] 0.5210336 0.5365843 0.5508775 0.5641652 0.5766309 0.5884133 0.5996195
 [15] 0.6103344 0.6206266 0.6305522 0.6401580 0.6494832 0.6585615 0.6674218
 [22] 0.6760892 0.6845856 0.6929306 0.7011416 0.7092340 0.7172220 0.7251184
 [29] 0.7329348 0.7406822 0.7483704 0.7560090 0.7636066 0.7711715 0.7787117
 [36] 0.7862346 0.7937475 0.8012575 0.8087712 0.8162954 0.8238366 0.8314012
 [43] 0.8389957 0.8466265 0.8543000 0.8620227 0.8698012 0.8776422 0.8855525
 [50] 0.8935391 0.9016093 0.9097706 0.9180308 0.9263980 0.9348807 0.9434878
 [57] 0.9522288 0.9611136 0.9701528 0.9793577 0.9887401 0.9983129 1.0080900
 [64] 1.0180862 1.0283176 1.0388014 1.0495568 1.0606042 1.0719664 1.0836681
 [71] 1.0957366 1.1082023 1.1210988 1.1344635 1.1483384 1.1627708 1.1778142
 [78] 1.1935293 1.2099854 1.2272625 1.2454531 1.2646650 1.2850249 1.3066831
 [85] 1.3298196 1.3546523 1.3814481 1.4105383 1.4423415 1.4773953 1.5164056
 [92] 1.5603231 1.6104675 1.6687411 1.7380195 1.8229263 1.9315508 2.0798926
 [99] 2.3065061 2.7484885       Inf
> params <- c(0.2, 1.5, 3.2, 6)
> bgbb.PlotTransactionRateHeterogeneity(params)
  [1]        Inf 8.84649821 5.05525233 3.63615728 2.87369995 2.39133046
  [7] 2.05587508 1.80766038 1.61575579 1.46244818 1.33682652 1.23178427
 [13] 1.14248402 1.06551297 0.99839085 0.93926957 0.88674236 0.83971847
 [19] 0.79733847 0.75891550 0.72389369 0.69181808 0.66231250 0.63506312
 [25] 0.60980587 0.58631691 0.56440516 0.54390646 0.52467892 0.50659929
 [31] 0.48955987 0.47346621 0.45823501 0.44379259 0.43007345 0.41701919
 [37] 0.40457755 0.39270162 0.38134913 0.37048193 0.36006543 0.35006824
 [43] 0.34046178 0.33121993 0.32231882 0.31373656 0.30545301 0.29744964
 [49] 0.28970933 0.28221625 0.27495574 0.26791418 0.26107888 0.25443803
 [55] 0.24798060 0.24169624 0.23557528 0.22960859 0.22378761 0.21810424
 [61] 0.21255082 0.20712009 0.20180515 0.19659941 0.19149660 0.18649068
 [67] 0.18157586 0.17674654 0.17199731 0.16732290 0.16271815 0.15817801
 [73] 0.15369750 0.14927167 0.14489557 0.14056422 0.13627260 0.13201556
 [79] 0.12778782 0.12358386 0.11939793 0.11522390 0.11105522 0.10688476
 [85] 0.10270471 0.09850636 0.09427989 0.09001400 0.08569555 0.08130891
 [91] 0.07683512 0.07225068 0.06752561 0.06262049 0.05748137 0.05203073
 [97] 0.04614948 0.03963666 0.03209874 0.02251364 0.00000000
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PosteriorMeanDropoutRate")
> ### * bgbb.PosteriorMeanDropoutRate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PosteriorMeanDropoutRate
> ### Title: BG/BB Posterior Mean Dropout Rate
> ### Aliases: bgbb.PosteriorMeanDropoutRate
> ###   bgbb.rf.matrix.PosteriorMeanDropoutRate
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # return the posterior mean dropout rate vector
> bgbb.rf.matrix.PosteriorMeanDropoutRate(est.params, rf.matrix)
 [1] 0.06955854 0.06955854 0.06955854 0.06955854 0.06955854 0.06955854
 [7] 0.11606209 0.09615814 0.08818559 0.08389008 0.08120446 0.16752458
[13] 0.13431763 0.11391216 0.10173828 0.20358250 0.16754421 0.13711654
[19] 0.23732732 0.19368820 0.27432512 0.31036693
> 
> 
> 
> cleanEx()
> nameEx("bgbb.PosteriorMeanTransactionRate")
> ### * bgbb.PosteriorMeanTransactionRate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.PosteriorMeanTransactionRate
> ### Title: BG/BB Posterior Mean Transaction Rate
> ### Aliases: bgbb.PosteriorMeanTransactionRate
> ###   bgbb.rf.matrix.PosteriorMeanTransactionRate
> 
> ### ** Examples
> 
> data(donationsSummary)
> 
> rf.matrix <- donationsSummary$rf.matrix
> # donationsSummary$rf.matrix already has appropriate column names
> 
> # starting-point parameters
> startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> est.params <- bgbb.EstimateParameters(rf.matrix, startingparams)
> 
> # return the posterior mean transaction rate vector
> bgbb.rf.matrix.PosteriorMeanTransactionRate(est.params, rf.matrix)
 [1] 0.9057300 0.7799986 0.6542672 0.5285358 0.4028044 0.2770730 0.8292385
 [8] 0.6778919 0.5419004 0.4106409 0.2814533 0.8177002 0.6119638 0.4446899
[15] 0.2972786 0.7974837 0.5443263 0.3404548 0.7512407 0.4426088 0.6633658
[22] 0.4877767
> 
> 
> 
> cleanEx()
> nameEx("bgbb.pmf.General")
> ### * bgbb.pmf.General
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.pmf.General
> ### Title: BG/BB General Probability Mass Function
> ### Aliases: bgbb.pmf.General
> 
> ### ** Examples
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> # Probability that a customer will make 3 transactions in the 10
> # transaction opportunities following the 6 transaction opportunities
> # in the calibration period, given BG/BB parameters.
> bgbb.pmf.General(params, n.cal=6, n.star=10, x.star=3)
[1] 0.0380618
> 
> # Vectors may also be provided as input:
> # Comparison between different frequencies:
> bgbb.pmf.General(params, n.cal=6, n.star=10, x.star=1:10)
 [1] 0.05163496 0.04300957 0.03806180 0.03507682 0.03335488 0.03259640
 [7] 0.03274249 0.03401318 0.03734459 0.04817762
> # Comparison between different holdout transaction opportunities:
> bgbb.pmf.General(params, n.cal=6, n.star=5:15, x.star=3)
 [1] 0.06712981 0.05601473 0.04897104 0.04414764 0.04066851 0.03806180
 [7] 0.03605058 0.03446194 0.03318258 0.03213544 0.03126641
> 
> 
> 
> cleanEx()
> nameEx("bgbb.pmf")
> ### * bgbb.pmf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgbb.pmf
> ### Title: BG/BB Probability Mass Function
> ### Aliases: bgbb.pmf
> 
> ### ** Examples
> 
> params <- c(1.20, 0.75, 0.66, 2.78)
> # The probability that a customer made 3 transactions in the first
> # 6 transaction opportunities.
> bgbb.pmf(params, n=6, x=3)
[1] 0.1000472
> 
> # Vectors may also be used as arguments:
> bgbb.pmf(params, n=6, x=0:6)
[1] 0.31268346 0.17039549 0.12143022 0.10004715 0.09132440 0.09202135 0.11209793
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.ConditionalExpectedTransactions")
> ### * bgnbd.ConditionalExpectedTransactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.ConditionalExpectedTransactions
> ### Title: BG/NBD Conditional Expected Transactions
> ### Aliases: bgnbd.ConditionalExpectedTransactions
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> # Number of transactions a customer is expected to make in 2 time
> # intervals, given that they made 10 repeat transactions in a time period
> # of 39 intervals, with the 10th repeat transaction occurring in the 35th
> # interval.
> bgnbd.ConditionalExpectedTransactions(params, T.star=2, x=10, t.x=35, T.cal=39)
[1] 0.3915692
> 
> # We can also compare expected transactions across different
> # calibration period behaviors:
> bgnbd.ConditionalExpectedTransactions(params, T.star=2, x=5:20, t.x=25, T.cal=39)
 [1] 0.122171799 0.128104150 0.127536556 0.121369942 0.110984904 0.097978545
 [7] 0.083880081 0.069937192 0.057017603 0.045615565 0.035922504 0.027919325
[13] 0.021461762 0.016345967 0.012352516 0.009272427
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.EstimateParameters")
> ### * bgnbd.EstimateParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.EstimateParameters
> ### Title: BG/NBD Parameter Estimation
> ### Aliases: bgnbd.EstimateParameters
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # starting-point parameters
> startingparams <- c(1.0, 3, 1.0, 3)
> # estimated parameters
> est.params <- bgnbd.EstimateParameters(cal.cbs, startingparams)
> 
> # log-likelihood of estimated parameters
> bgnbd.cbs.LL(est.params, cal.cbs)
[1] -9582.429
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.Expectation")
> ### * bgnbd.Expectation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.Expectation
> ### Title: BG/NBD Expectation
> ### Aliases: bgnbd.Expectation
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> 
> # Number of repeat transactions a customer is expected to make in 2 time intervals.
> bgnbd.Expectation(params, t=2)
[1] 0.1033897
> 
> # We can also compare expected transactions over time:
> bgnbd.Expectation(params, t=1:10)
 [1] 0.05326789 0.10338974 0.15086523 0.19606817 0.23928820 0.28075589
 [7] 0.32065882 0.35915229 0.39636680 0.43241336
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.ExpectedCumulativeTransactions")
> ### * bgnbd.ExpectedCumulativeTransactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.ExpectedCumulativeTransactions
> ### Title: BG/NBD Expected Cumulative Transactions
> ### Aliases: bgnbd.ExpectedCumulativeTransactions
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> 
> # Returns a vector containing cumulative repeat transactions for 273 days.
> # All parameters are in weeks; the calibration period lasted 39 weeks.
> bgnbd.ExpectedCumulativeTransactions(params, T.cal=cal.cbs[,"T.cal"], T.tot=39, n.periods.final=273)
  [1]    0.1408682    0.4525476    0.8942846    1.4883582    2.2568541
  [6]    3.2138431    4.4124181    5.7408416    7.2450140    8.8764944
 [11]   10.6890713   12.6890699   14.8906029   17.2685391   19.7980146
 [16]   22.4779024   25.3070993   28.3236557   31.5417879   35.0068979
 [21]   38.6387532   42.4361856   46.4293539   50.5933549   54.9348473
 [26]   59.4447847   64.1455245   69.0513929   74.1765916   79.4960720
 [31]   84.9459158   90.5802259   96.4056271  102.4678213  108.7651250
 [36]  115.2098053  121.9419504  128.8263867  135.9014475  143.1503153
 [41]  150.6033005  158.2591225  166.0539163  173.9870533  182.0579093
 [46]  190.2423868  198.6418365  207.2627121  216.0879415  225.0849805
 [51]  234.2137846  243.4738308  252.9193802  262.4867770  272.2773344
 [56]  282.2426883  292.4210431  302.7954577  313.3335149  324.0031199
 [61]  334.8429243  345.8442469  357.0219723  368.4378000  380.0041441
 [66]  391.7203685  403.5780162  415.6000160  427.7777692  440.1105888
 [71]  452.5664919  465.1607617  477.9241807  490.8011465  503.8618147
 [76]  517.0582664  530.4134877  543.9032845  557.4723952  571.1052205
 [81]  584.8410815  598.6797752  612.6915283  626.8519716  640.9256765
 [86]  654.9142727  668.8193323  682.6423728  696.3848605  710.0482128
 [91]  723.6338007  737.1429513  750.5769500  763.9370425  777.2244362
 [96]  790.4403028  803.5857793  816.6619698  829.6699467  842.6107527
[101]  855.4854011  868.2948780  881.0401428  893.7221295  906.3417475
[106]  918.8998830  931.3973994  943.8351387  956.2139216  968.5345491
[111]  980.7978026  993.0044448 1005.1552206 1017.2508573 1029.2920655
[116] 1041.2795396 1053.2139584 1065.0959856 1076.9262700 1088.7054465
[121] 1100.4341364 1112.1129473 1123.7424745 1135.3233004 1146.8559956
[126] 1158.3411190 1169.7792180 1181.1708290 1192.5164780 1203.8166804
[131] 1215.0719415 1226.2827570 1237.4496128 1248.5729860 1259.6533443
[136] 1270.6911470 1281.6868447 1292.6408797 1303.5536864 1314.4256914
[141] 1325.2573135 1336.0489642 1346.8010478 1357.5139613 1368.1880952
[146] 1378.8238331 1389.4215519 1399.9816226 1410.5044094 1420.9902710
[151] 1431.4395597 1441.8526224 1452.2298002 1462.5714286 1472.8778379
[156] 1483.1493531 1493.3862941 1503.5889755 1513.7577075 1523.8927951
[161] 1533.9945387 1544.0632343 1554.0991733 1564.1026426 1574.0739251
[166] 1584.0132992 1593.9210393 1603.7974160 1613.6426956 1623.4571408
[171] 1633.2410104 1642.9945597 1652.7180402 1662.4116999 1672.0757833
[176] 1681.7105316 1691.3161825 1700.8929707 1710.4411273 1719.9608807
[181] 1729.4524560 1738.9160751 1748.3519574 1757.7603189 1767.1413731
[186] 1776.4953305 1785.8223990 1795.1227837 1804.3966871 1813.6443092
[191] 1822.8658472 1832.0614961 1841.2314483 1850.3758937 1859.4950200
[196] 1868.5890124 1877.6580541 1886.7023257 1895.7220059 1904.7172711
[201] 1913.6882955 1922.6352513 1931.5583086 1940.4576356 1949.3333984
[206] 1958.1857611 1967.0148859 1975.8209333 1984.6040618 1993.3644280
[211] 2002.1021867 2010.8174911 2019.5104927 2028.1813409 2036.8301838
[216] 2045.4571678 2054.0624374 2062.6461359 2071.2084047 2079.7493837
[221] 2088.2692114 2096.7680247 2105.2459591 2113.7031485 2122.1397254
[226] 2130.5558210 2138.9515650 2147.3270857 2155.6825103 2164.0179642
[231] 2172.3335720 2180.6294566 2188.9057399 2197.1625423 2205.3999833
[236] 2213.6181808 2221.8172517 2229.9973119 2238.1584757 2246.3008565
[241] 2254.4245667 2262.5297173 2270.6164184 2278.6847788 2286.7349065
[246] 2294.7669084 2302.7808900 2310.7769563 2318.7552109 2326.7157565
[251] 2334.6586950 2342.5841270 2350.4921524 2358.3828701 2366.2563780
[256] 2374.1127731 2381.9521515 2389.7746084 2397.5802381 2405.3691342
[261] 2413.1413891 2420.8970946 2428.6363417 2436.3592203 2444.0658198
[266] 2451.7562286 2459.4305342 2467.0888237 2474.7311830 2482.3576975
[271] 2489.9684517 2497.5635295 2505.1430139
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.LL")
> ### * bgnbd.LL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.LL
> ### Title: BG/NBD Log-Likelihood
> ### Aliases: bgnbd.LL bgnbd.cbs.LL
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # random assignment of parameters
> params <- c(0.5, 6, 1.2, 3.3)
> # returns the log-likelihood of the given parameters
> bgnbd.cbs.LL (params, cal.cbs)
[1] -9783.444
> 
> # compare the speed and results to the following:
> cal.cbs.compressed <- bgnbd.compress.cbs(cal.cbs)
Data reduced from 2357 rows to 1016 rows.
> bgnbd.cbs.LL (params, cal.cbs.compressed)
[1] -9783.445
> 
> # Returns the log likelihood of the parameters for a customer who
> # made 3 transactions in a calibration period that ended at t=6,
> # with the last transaction occurring at t=4.
> bgnbd.LL(params, x=3, t.x=4, T.cal=6)
[1] -7.576382
> 
> # We can also give vectors as function parameters:
> set.seed(7)
> x <- sample(1:4, 10, replace = TRUE)
> t.x <- sample(1:4, 10, replace = TRUE)
> T.cal <- rep(4, 10)
> bgnbd.LL(params, x, t.x, T.cal)
[1] -52.17515
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PAlive")
> ### * bgnbd.PAlive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PAlive
> ### Title: BG/NBD P(Alive)
> ### Aliases: bgnbd.PAlive
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> 
> bgnbd.PAlive(params, x=23, t.x=39, T.cal=39)
[1] 0.9685555
> # P(Alive) of a customer who has the same recency and total
> # time observed.
> 
> bgnbd.PAlive(params, x=5:20, t.x=30, T.cal=39)
 [1] 0.7056268 0.6870911 0.6638662 0.6365456 0.6056145 0.5715517 0.5348848
 [8] 0.4962125 0.4562051 0.4155845 0.3750919 0.3354462 0.2973031 0.2612190
[15] 0.2276261 0.1968204
> # Note the "increasing frequency paradox".
> 
> # To visualize the distribution of P(Alive) across customers:
> 
> data(cdnowSummary)
> cbs <- cdnowSummary$cbs
> params <- bgnbd.EstimateParameters(cbs, par.start = c(0.243, 4.414, 0.793, 2.426))
> p.alives <- bgnbd.PAlive(params, cbs[,"x"], cbs[,"t.x"], cbs[,"T.cal"])
> plot(density(p.alives))
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotDropoutRateHeterogeneity")
> ### * bgnbd.PlotDropoutRateHeterogeneity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotDropoutRateHeterogeneity
> ### Title: BG/NBD Plot Dropout Probability Heterogeneity
> ### Aliases: bgnbd.PlotDropoutRateHeterogeneity
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> bgnbd.PlotDropoutRateHeterogeneity(params)
              [,1]       [,2]       [,3]       [,4]       [,5]      [,6]
x.axis.ticks     0 0.00835456 0.01670912 0.02506368 0.03341824 0.0417728
heterogeneity  Inf 4.43749411 3.79826161 3.45024208 3.21112606 3.0284529
                    [,7]       [,8]       [,9]      [,10]     [,11]      [,12]
x.axis.ticks  0.05012736 0.05848192 0.06683648 0.07519104 0.0835456 0.09190016
heterogeneity 2.88009661 2.75472288 2.64577960 2.54915080 2.4620883 2.38266926
                  [,13]     [,14]     [,15]     [,16]    [,17]     [,18]
x.axis.ticks  0.1002547 0.1086093 0.1169638 0.1253184 0.133673 0.1420275
heterogeneity 2.3094977 2.2415291 2.1779623 2.1181696 2.061651 2.0079996
                  [,19]     [,20]     [,21]     [,22]     [,23]     [,24]
x.axis.ticks  0.1503821 0.1587366 0.1670912 0.1754458 0.1838003 0.1921549
heterogeneity 1.9568839 1.9080271 1.8611968 1.8161962 1.7728571 1.7310346
                  [,25]    [,26]     [,27]     [,28]     [,29]     [,30]
x.axis.ticks  0.2005094 0.208864 0.2172186 0.2255731 0.2339277 0.2422822
heterogeneity 1.6906030 1.651453 1.6134869 1.5766210 1.5407796 1.5058954
                  [,31]     [,32]     [,33]     [,34]    [,35]     [,36]
x.axis.ticks  0.2506368 0.2589914 0.2673459 0.2757005 0.284055 0.2924096
heterogeneity 1.4719083 1.4387643 1.4064148 1.3748157 1.343927 1.3137130
                  [,37]     [,38]     [,39]     [,40]     [,41]    [,42]
x.axis.ticks  0.3007642 0.3091187 0.3174733 0.3258278 0.3341824 0.342537
heterogeneity 1.2841397 1.2551772 1.2267977 1.1989756 1.1716873 1.144911
                  [,43]     [,44]     [,45]     [,46]     [,47]     [,48]
x.axis.ticks  0.3508915 0.3592461 0.3676006 0.3759552 0.3843098 0.3926643
heterogeneity 1.1186272 1.0928167 1.0674624 1.0425484 1.0180597 0.9939825
                  [,49]     [,50]     [,51]     [,52]     [,53]     [,54]
x.axis.ticks  0.4010189 0.4093734 0.4177280 0.4260826 0.4344371 0.4427917
heterogeneity 0.9703038 0.9470115 0.9240943 0.9015416 0.8793436 0.8574909
                  [,55]     [,56]     [,57]     [,58]     [,59]     [,60]
x.axis.ticks  0.4511462 0.4595008 0.4678554 0.4762099 0.4845645 0.4929190
heterogeneity 0.8359748 0.8147872 0.7939204 0.7733671 0.7531206 0.7331746
                  [,61]     [,62]     [,63]     [,64]     [,65]     [,66]
x.axis.ticks  0.5012736 0.5096282 0.5179827 0.5263373 0.5346918 0.5430464
heterogeneity 0.7135229 0.6941601 0.6750807 0.6562799 0.6377529 0.6194954
                  [,67]     [,68]     [,69]     [,70]     [,71]     [,72]
x.axis.ticks  0.5514010 0.5597555 0.5681101 0.5764647 0.5848192 0.5931738
heterogeneity 0.6015032 0.5837724 0.5662995 0.5490810 0.5321138 0.5153950
                  [,73]     [,74]     [,75]     [,76]     [,77]     [,78]
x.axis.ticks  0.6015283 0.6098829 0.6182375 0.6265920 0.6349466 0.6433011
heterogeneity 0.4989218 0.4826916 0.4667022 0.4509513 0.4354371 0.4201576
                  [,79]     [,80]     [,81]     [,82]     [,83]     [,84]
x.axis.ticks  0.6516557 0.6600103 0.6683648 0.6767194 0.6850739 0.6934285
heterogeneity 0.4051113 0.3902968 0.3757127 0.3613581 0.3472318 0.3333333
                  [,85]     [,86]     [,87]     [,88]     [,89]     [,90]
x.axis.ticks  0.7017831 0.7101376 0.7184922 0.7268467 0.7352013 0.7435559
heterogeneity 0.3196619 0.3062171 0.2929988 0.2800068 0.2672413 0.2547027
                  [,91]    [,92]     [,93]     [,94]     [,95]     [,96]
x.axis.ticks  0.7519104 0.760265 0.7686195 0.7769741 0.7853287 0.7936832
heterogeneity 0.2423913 0.230308 0.2184537 0.2068294 0.1954366 0.1842770
                  [,97]     [,98]     [,99]    [,100]
x.axis.ticks  0.8020378 0.8103923 0.8187469 0.8271015
heterogeneity 0.1733524 0.1626651 0.1522176 0.1420128
> params <- c(0.243, 4.414, 1.33, 2.426)
> bgnbd.PlotDropoutRateHeterogeneity(params)
              [,1]        [,2]       [,3]       [,4]       [,5]       [,6]
x.axis.ticks     0 0.008846886 0.01769377 0.02654066 0.03538754 0.04423443
heterogeneity    0 0.818603214 1.01592281 1.14648389 1.24435334 1.32195876
                    [,7]      [,8]       [,9]      [,10]      [,11]      [,12]
x.axis.ticks  0.05308132 0.0619282 0.07077509 0.07962198 0.08846886 0.09731575
heterogeneity 1.38544260 1.4383605 1.48298499 1.52087186 1.55314108 1.58063090
                  [,13]     [,14]     [,15]     [,16]     [,17]     [,18]
x.axis.ticks  0.1061626 0.1150095 0.1238564 0.1327033 0.1415502 0.1503971
heterogeneity 1.6039882 1.6237250 1.6402549 1.6539181 1.6649983 1.6737358
                 [,19]     [,20]     [,21]     [,22]     [,23]     [,24]
x.axis.ticks  0.159244 0.1680908 0.1769377 0.1857846 0.1946315 0.2034784
heterogeneity 1.680336 1.6849758 1.6878104 1.6889755 1.6885914 1.6867653
                  [,25]     [,26]    [,27]     [,28]     [,29]     [,30]
x.axis.ticks  0.2123253 0.2211722 0.230019 0.2388659 0.2477128 0.2565597
heterogeneity 1.6835931 1.6791615 1.673549 1.6668265 1.6590596 1.6503080
                  [,31]     [,32]     [,33]     [,34]     [,35]    [,36]
x.axis.ticks  0.2654066 0.2742535 0.2831004 0.2919472 0.3007941 0.309641
heterogeneity 1.6406268 1.6300670 1.6186757 1.6064970 1.5935717 1.579938
                  [,37]     [,38]     [,39]     [,40]     [,41]     [,42]
x.axis.ticks  0.3184879 0.3273348 0.3361817 0.3450286 0.3538754 0.3627223
heterogeneity 1.5656327 1.5506887 1.5351384 1.5190118 1.5023375 1.4851425
                  [,43]     [,44]    [,45]     [,46]     [,47]     [,48]
x.axis.ticks  0.3715692 0.3804161 0.389263 0.3981099 0.4069568 0.4158037
heterogeneity 1.4674527 1.4492927 1.430686 1.4116545 1.3922203 1.3724039
                  [,49]     [,50]     [,51]     [,52]     [,53]    [,54]
x.axis.ticks  0.4246505 0.4334974 0.4423443 0.4511912 0.4600381 0.468885
heterogeneity 1.3522250 1.3317029 1.3108559 1.2897019 1.2682582 1.246541
                  [,55]     [,56]     [,57]     [,58]     [,59]     [,60]
x.axis.ticks  0.4777319 0.4865787 0.4954256 0.5042725 0.5131194 0.5219663
heterogeneity 1.2245679 1.2023534 1.1799133 1.1572627 1.1344162 1.1113881
                  [,61]     [,62]     [,63]     [,64]     [,65]     [,66]
x.axis.ticks  0.5308132 0.5396601 0.5485069 0.5573538 0.5662007 0.5750476
heterogeneity 1.0881926 1.0648434 1.0413541 1.0177380 0.9940083 0.9701779
                  [,67]     [,68]     [,69]     [,70]    [,71]     [,72]
x.axis.ticks  0.5838945 0.5927414 0.6015883 0.6104352 0.619282 0.6281289
heterogeneity 0.9462598 0.9222665 0.8982108 0.8741051 0.849962 0.8257937
                  [,73]     [,74]     [,75]     [,76]     [,77]     [,78]
x.axis.ticks  0.6369758 0.6458227 0.6546696 0.6635165 0.6723634 0.6812102
heterogeneity 0.8016127 0.7774313 0.7532620 0.7291172 0.7050094 0.6809511
                  [,79]     [,80]     [,81]     [,82]     [,83]     [,84]
x.axis.ticks  0.6900571 0.6989040 0.7077509 0.7165978 0.7254447 0.7342916
heterogeneity 0.6569550 0.6330339 0.6092008 0.5854689 0.5618515 0.5383622
                  [,85]     [,86]     [,87]     [,88]     [,89]     [,90]
x.axis.ticks  0.7431384 0.7519853 0.7608322 0.7696791 0.7785260 0.7873729
heterogeneity 0.5150149 0.4918240 0.4688039 0.4459698 0.4233371 0.4009218
                  [,91]     [,92]     [,93]     [,94]     [,95]     [,96]
x.axis.ticks  0.7962198 0.8050666 0.8139135 0.8227604 0.8316073 0.8404542
heterogeneity 0.3787406 0.3568108 0.3351506 0.3137789 0.2927156 0.2719820
                  [,97]     [,98]     [,99]    [,100]
x.axis.ticks  0.8493011 0.8581480 0.8669949 0.8758417
heterogeneity 0.2516004 0.2315949 0.2119912 0.1928171
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotFreqVsConditionalExpectedFrequency")
> ### * bgnbd.PlotFreqVsConditionalExpectedFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotFreqVsConditionalExpectedFrequency
> ### Title: BG/NBD Plot Frequency vs. Conditional Expected Frequency
> ### Aliases: bgnbd.PlotFreqVsConditionalExpectedFrequency
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # number of transactions by each customer in the 39 weeks
> # following the calibration period
> x.star <- cal.cbs[,"x.star"]
> 
> # parameters estimated using bgnbd.EstimateParameters
> est.params <- c(0.243, 4.414, 0.793, 2.426)
> # the maximum censor number that can be used
> max(cal.cbs[,"x"])
[1] 29
> 
> # plot conditional expected holdout period frequencies,
> # binned according to calibration period frequencies
> bgnbd.PlotFreqVsConditionalExpectedFrequency(est.params, T.star=39, cal.cbs, x.star, censor=7)
                           freq.0      freq.1     freq.2     freq.3    freq.4
transaction.actual      0.2367116   0.6970387   1.392523   1.560000  2.532258
transaction.expected    0.2254509   0.5231761   1.044170   1.520293  2.163875
bin.size             1411.0000000 439.0000000 214.000000 100.000000 62.000000
                        freq.5    freq.6   freq.7+
transaction.actual    2.947368  3.862069  6.359375
transaction.expected  2.653832  3.503991  6.157072
bin.size             38.000000 29.000000 64.000000
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotFrequencyInCalibration")
> ### * bgnbd.PlotFrequencyInCalibration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotFrequencyInCalibration
> ### Title: BG/NBD Plot Frequency in Calibration Period
> ### Aliases: bgnbd.PlotFrequencyInCalibration
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # parameters estimated using bgnbd.EstimateParameters
> est.params <- c(0.243, 4.414, 0.793, 2.426)
> # the maximum censor number that can be used
> max(cal.cbs[,"x"])
[1] 29
> 
> bgnbd.PlotFrequencyInCalibration(est.params, cal.cbs, censor=7)
             freq.0   freq.1   freq.2   freq.3   freq.4   freq.5   freq.6
n.x.actual   1411.0 439.0000 214.0000 100.0000 62.00000 38.00000 29.00000
n.x.expected 1406.5 460.8076 192.7094 101.3067 59.93608 38.17857 25.58969
              freq.7+
n.x.actual   64.00000
n.x.expected 71.34782
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotRecVsConditionalExpectedFrequency")
> ### * bgnbd.PlotRecVsConditionalExpectedFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotRecVsConditionalExpectedFrequency
> ### Title: BG/NBD Plot Actual vs. Conditional Expected Frequency by Recency
> ### Aliases: bgnbd.PlotRecVsConditionalExpectedFrequency
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # number of transactions by each customer in the 39 weeks following
> # the calibration period
> x.star <- cal.cbs[,"x.star"]
> 
> # parameters estimated using bgnbd.EstimateParameters
> est.params <- c(0.243, 4.414, 0.793, 2.426)
> 
> # plot conditional expected holdout period transactions, binned according to
> # calibration period recencies
> bgnbd.PlotRecVsConditionalExpectedFrequency(est.params, cal.cbs, T.star=39, x.star)
                 [,1]       [,2]       [,3]       [,4]       [,5]       [,6]
actual      0.2766731  0.6285714  0.7809524  0.6010204  0.5833333  0.6904762
expected    0.2131680  0.2411826  0.2835797  0.2931859  0.3226821  0.3263880
bin.size 1445.0000000 40.0000000 44.0000000 31.0000000 22.0000000 30.0000000
               [,7]       [,8]       [,9]      [,10]     [,11]      [,12]
actual    0.8054422  0.2023810  0.7948980  0.9611111  1.055556  0.9693878
expected  0.4054629  0.4536269  0.5077251  0.5523395  0.622928  0.6817501
bin.size 27.0000000 28.0000000 40.0000000 21.0000000 14.000000 22.0000000
              [,13]      [,14]      [,15]      [,16]      [,17]     [,18]
actual    2.3690476  1.3750000  0.5000000  1.0544218  1.3047619  2.035714
expected  0.7289366  0.8177553  0.7240358  0.9180671  0.8920792  0.857040
bin.size 17.0000000 14.0000000 21.0000000 24.0000000 24.0000000 22.000000
             [,19]      [,20]     [,21]     [,22]      [,23]     [,24]
actual    1.011905  0.9642857  2.019048  1.092517  0.5456349  1.438095
expected  1.148450  1.1980999  1.313945  1.426162  1.2088705  2.435797
bin.size 23.000000 25.0000000 29.000000 36.000000 24.0000000 27.000000
             [,25]     [,26]     [,27]     [,28]     [,29]     [,30]     [,31]
actual    1.564286  2.539116  3.310544  1.126984  3.980556  4.157823  3.700000
expected  1.625557  2.123978  2.474654  1.778310  3.072547  2.984879  4.120046
bin.size 35.000000 34.000000 31.000000 27.000000 31.000000 26.000000 30.000000
             [,32]     [,33]     [,34]     [,35]    [,36]     [,37]    [,38]
actual    2.392857  5.119048  3.914286  4.083333 1.611111  3.166667 5.900000
expected  1.843333  3.529310  3.822600  4.282133 3.640027  2.563319 8.196902
bin.size 18.000000 17.000000 18.000000 13.000000 9.000000 11.000000 6.000000
             [,39]
actual   2.0000000
expected 0.7282841
bin.size 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotTrackingCum")
> ### * bgnbd.PlotTrackingCum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotTrackingCum
> ### Title: BG/NBD Tracking Cumulative Transactions Plot
> ### Aliases: bgnbd.PlotTrackingCum
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # Cumulative repeat transactions made by all customers across calibration
> # and holdout periods
> cu.tracking <- cdnowSummary$cu.tracking
> 
> # parameters estimated using bgnbd.EstimateParameters
> est.params <- c(0.243, 4.414, 0.793, 2.426)
> 
> # All parameters are in weeks; the calibration period lasted 39
> # weeks and the holdout period another 39.
> bgnbd.PlotTrackingCum(est.params, T.cal=cal.cbs[,"T.cal"], T.tot=78, cu.tracking)
             [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]
actual   0.000000 19.00000 42.00000 81.00000 119.0000 192.0000 261.0000
expected 4.412418 17.26854 38.63875 69.05139 108.7651 158.2591 216.0879
             [,8]    [,9]    [,10]    [,11]   [,12]    [,13]   [,14]     [,15]
actual   351.0000 428.000 504.0000 610.0000 733.000 828.0000 914.000 1005.0000
expected 282.2427 357.022 440.1106 530.4135 626.852 723.6338 816.662  906.3417
             [,16]    [,17]    [,18]   [,19]    [,20]    [,21]    [,22]
actual   1078.0000 1149.000 1222.000 1286.00 1359.000 1414.000 1484.000
expected  993.0044 1076.926 1158.341 1237.45 1314.426 1389.422 1462.571
            [,23]    [,24]    [,25]    [,26]    [,27]    [,28]    [,29]
actual   1517.000 1573.000 1672.000 1746.000 1800.000 1840.000 1885.000
expected 1533.995 1603.797 1672.076 1738.916 1804.397 1868.589 1931.558
            [,30]    [,31]    [,32]    [,33]    [,34]    [,35]    [,36]   [,37]
actual   1973.000 2032.000 2069.000 2132.000 2192.000 2239.000 2290.000 2342.00
expected 1993.364 2054.062 2113.703 2172.334 2229.997 2286.735 2342.584 2397.58
            [,38]    [,39]   [,40]    [,41]   [,42]    [,43]    [,44]    [,45]
actual   2395.000 2457.000 2507.00 2563.000 2612.00 2671.000 2718.000 2803.000
expected 2451.756 2505.143 2557.77 2609.663 2660.85 2711.353 2761.197 2810.402
            [,46]    [,47]    [,48]    [,49]    [,50]    [,51]    [,52]
actual   2864.000 2923.000 2968.000 3038.000 3104.000 3153.000 3183.000
expected 2858.989 2906.978 2954.386 3001.233 3047.533 3093.303 3138.558
            [,53]    [,54]    [,55]   [,56]    [,57]    [,58]    [,59]    [,60]
actual   3234.000 3276.000 3329.000 3357.00 3404.000 3444.000 3490.000 3533.000
expected 3183.313 3227.582 3271.376 3314.71 3357.595 3400.043 3442.064 3483.669
           [,61]    [,62]    [,63]    [,64]    [,65]    [,66]    [,67]    [,68]
actual   3598.00 3677.000 3727.000 3786.000 3844.000 3879.000 3915.000 3962.000
expected 3524.87 3565.674 3606.092 3646.133 3685.805 3725.117 3764.076 3802.692
           [,69]    [,70]    [,71]    [,72]    [,73]    [,74]    [,75]    [,76]
actual   3991.00 4035.000 4077.000 4112.000 4141.000 4183.000 4231.000 4279.000
expected 3840.97 3878.919 3916.545 3953.855 3990.856 4027.554 4063.955 4100.065
            [,77]    [,78]
actual   4311.000 4339.000
expected 4135.889 4171.434
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotTrackingInc")
> ### * bgnbd.PlotTrackingInc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotTrackingInc
> ### Title: BG/NBD Tracking Incremental Transactions Comparison
> ### Aliases: bgnbd.PlotTrackingInc
> 
> ### ** Examples
> 
> data(cdnowSummary)
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # Cumulative repeat transactions made by all customers across calibration
> # and holdout periods
> cu.tracking <- cdnowSummary$cu.tracking
> # make the tracking data incremental
> inc.tracking <- dc.CumulativeToIncremental(cu.tracking)
> 
> # parameters estimated using bgnbd.EstimateParameters
> est.params <- c(0.243, 4.414, 0.793, 2.426)
> 
> # All parameters are in weeks; the calibration period lasted 39
> # weeks and the holdout period another 39.
> bgnbd.PlotTrackingInc(est.params, T.cal=cal.cbs[,"T.cal"], T.tot=78, inc.tracking)
             [,1]     [,2]     [,3]     [,4]     [,5]   [,6]     [,7]     [,8]
actual   0.000000 19.00000 23.00000 39.00000 38.00000 73.000 69.00000 90.00000
expected 4.412418 12.85612 21.37021 30.41264 39.71373 49.494 57.82882 66.15475
             [,9]    [,10]    [,11]     [,12]    [,13]    [,14]    [,15]
actual   77.00000 76.00000 106.0000 123.00000 95.00000 86.00000 91.00000
expected 74.77928 83.08862  90.3029  96.43848 96.78183 93.02817 89.67978
           [,16]    [,17]    [,18]    [,19]    [,20]    [,21]    [,22]    [,23]
actual   73.0000 71.00000 73.00000 64.00000 73.00000 55.00000 70.00000 33.00000
expected 86.6627 83.92183 81.41485 79.10849 76.97608 74.99586 73.14988 71.42311
            [,24]    [,25]    [,26]    [,27]    [,28]   [,29]    [,30]    [,31]
actual   56.00000 99.00000 74.00000 54.00000 40.00000 45.0000 88.00000 59.00000
expected 69.80288 68.27837 66.84029 65.48061 64.19233 62.9693 61.80612 60.69801
            [,32]    [,33]    [,34]    [,35]    [,36]    [,37]    [,38]
actual   37.00000 63.00000 60.00000 47.00000 51.00000 52.00000 53.00000
expected 59.64071 58.63042 57.66374 56.73759 55.84922 54.99611 54.17599
            [,39]   [,40]    [,41]    [,42]    [,43]   [,44]    [,45]    [,46]
actual   62.00000 50.0000 56.00000 49.00000 59.00000 47.0000 85.00000 61.00000
expected 53.38679 52.6266 51.89371 51.18652 50.50356 49.8435 49.20508 48.58716
            [,47]    [,48]   [,49]    [,50]    [,51]    [,52]    [,53]    [,54]
actual   59.00000 45.00000 70.0000 66.00000 49.00000 30.00000 51.00000 42.00000
expected 47.98867 47.40863 46.8461 46.30024 45.77025 45.25538 44.75493 44.26826
            [,55]    [,56]    [,57]    [,58]    [,59]    [,60]    [,61]
actual   53.00000 28.00000 47.00000 40.00000 46.00000 43.00000 65.00000
expected 43.79474 43.33381 42.88492 42.44756 42.02127 41.60558 41.20007
            [,62]  [,63]    [,64]    [,65]    [,66]    [,67]    [,68]    [,69]
actual   79.00000 50.000 59.00000 58.00000 35.00000 36.00000 47.00000 29.00000
expected 40.80434 40.418 40.04071 39.67211 39.31189 38.95973 38.61535 38.27847
            [,70]    [,71]    [,72]    [,73]   [,74]    [,75]    [,76]    [,77]
actual   44.00000 42.00000 35.00000 29.00000 42.0000 48.00000 48.00000 32.00000
expected 37.94883 37.62618 37.31027 37.00089 36.6978 36.40082 36.10974 35.82437
            [,78]
actual   28.00000
expected 35.54453
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.PlotTransactionRateHeterogeneity")
> ### * bgnbd.PlotTransactionRateHeterogeneity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.PlotTransactionRateHeterogeneity
> ### Title: BG/NBD Plot Transaction Rate Heterogeneity
> ### Aliases: bgnbd.PlotTransactionRateHeterogeneity
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> bgnbd.PlotTransactionRateHeterogeneity(params)
              [,1]         [,2]        [,3]       [,4]       [,5]       [,6]
x.axis.ticks     0  0.005499636  0.01099927 0.01649891 0.02199854 0.02749818
heterogeneity  Inf 19.244194316 11.11417824 7.98056437 6.26487358 5.16426789
                    [,7]       [,8]       [,9]      [,10]      [,11]    [,12]
x.axis.ticks  0.03299782 0.03849745 0.04399709 0.04949672 0.05499636 0.060496
heterogeneity 4.39062039 3.81333097 3.36404602 3.00328674 2.70654785 2.457756
                   [,13]      [,14]     [,15]      [,16]      [,17]      [,18]
x.axis.ticks  0.06599563 0.07149527 0.0769949 0.08249454 0.08799418 0.09349381
heterogeneity 2.24589872 2.06315845 1.9038210 1.76360483 1.63923367 1.52815424
                   [,19]     [,20]     [,21]     [,22]    [,23]     [,24]
x.axis.ticks  0.09899345 0.1044931 0.1099927 0.1154924 0.120992 0.1264916
heterogeneity 1.42834483 1.3381821 1.2563461 1.1817520 1.113499 1.0508314
                  [,25]     [,26]     [,27]     [,28]     [,29]     [,30]
x.axis.ticks  0.1319913 0.1374909 0.1429905 0.1484902 0.1539898 0.1594894
heterogeneity 0.9931125 0.9397992 0.8904267 0.8445939 0.8019532 0.7622013
                  [,31]     [,32]     [,33]     [,34]     [,35]     [,36]
x.axis.ticks  0.1649891 0.1704887 0.1759884 0.1814880 0.1869876 0.1924873
heterogeneity 0.7250727 0.6903333 0.6577766 0.6272191 0.5984972 0.5714648
                  [,37]     [,38]     [,39]     [,40]     [,41]     [,42]
x.axis.ticks  0.1979869 0.2034865 0.2089862 0.2144858 0.2199854 0.2254851
heterogeneity 0.5459908 0.5219572 0.4992577 0.4777959 0.4574843 0.4382436
                  [,43]     [,44]     [,45]     [,46]     [,47]     [,48]
x.axis.ticks  0.2309847 0.2364843 0.2419840 0.2474836 0.2529833 0.2584829
heterogeneity 0.4200012 0.4026911 0.3862525 0.3706299 0.3557721 0.3416323
                  [,49]     [,50]     [,51]     [,52]     [,53]     [,54]
x.axis.ticks  0.2639825 0.2694822 0.2749818 0.2804814 0.2859811 0.2914807
heterogeneity 0.3281668 0.3153357 0.3031019 0.2914309 0.2802909 0.2696523
                  [,55]     [,56]     [,57]     [,58]     [,59]     [,60]
x.axis.ticks  0.2969803 0.3024800 0.3079796 0.3134793 0.3189789 0.3244785
heterogeneity 0.2594873 0.2497704 0.2404776 0.2315864 0.2230759 0.2149265
                  [,61]     [,62]     [,63]     [,64]     [,65]     [,66]
x.axis.ticks  0.3299782 0.3354778 0.3409774 0.3464771 0.3519767 0.3574763
heterogeneity 0.2071199 0.1996388 0.1924671 0.1855895 0.1789919 0.1726607
                  [,67]     [,68]     [,69]     [,70]     [,71]     [,72]
x.axis.ticks  0.3629760 0.3684756 0.3739752 0.3794749 0.3849745 0.3904742
heterogeneity 0.1665833 0.1607478 0.1551428 0.1497578 0.1445827 0.1396080
                  [,73]     [,74]     [,75]     [,76]     [,77]     [,78]
x.axis.ticks  0.3959738 0.4014734 0.4069731 0.4124727 0.4179723 0.4234720
heterogeneity 0.1348247 0.1302243 0.1257988 0.1215404 0.1174421 0.1134967
                  [,79]     [,80]     [,81]     [,82]      [,83]      [,84]
x.axis.ticks  0.4289716 0.4344712 0.4399709 0.4454705 0.45097015 0.45646979
heterogeneity 0.1096980 0.1060395 0.1025155 0.0991204 0.09584874 0.09269552
                   [,85]      [,86]      [,87]      [,88]     [,89]      [,90]
x.axis.ticks  0.46196942 0.46746906 0.47296870 0.47846833 0.4839680 0.48946760
heterogeneity 0.08965588 0.08672521 0.08389914 0.08117347 0.0785442 0.07600753
                   [,91]      [,92]      [,93]      [,94]      [,95]      [,96]
x.axis.ticks  0.49496724 0.50046688 0.50596651 0.51146615 0.51696578 0.52246542
heterogeneity 0.07355981 0.07119757 0.06891749 0.06671639 0.06459125 0.06253916
                   [,97]      [,98]      [,99]     [,100]
x.axis.ticks  0.52796506 0.53346469 0.53896433 0.54446396
heterogeneity 0.06055734 0.05864315 0.05679403 0.05500755
> params <- c(0.53, 4.414, 0.793, 2.426)
> bgnbd.PlotTransactionRateHeterogeneity(params)
              [,1]         [,2]       [,3]       [,4]       [,5]       [,6]
x.axis.ticks     0  0.007795883 0.01559177 0.02338765 0.03118353 0.03897941
heterogeneity  Inf 12.408358913 8.65537185 6.91159561 5.83327694 5.07481682
                   [,7]       [,8]       [,9]      [,10]      [,11]      [,12]
x.axis.ticks  0.0467753 0.05457118 0.06236706 0.07016294 0.07795883 0.08575471
heterogeneity 4.5004990 4.04437258 3.66986783 3.35478135 3.08470531 2.84980143
                   [,13]     [,14]     [,15]     [,16]     [,17]    [,18]
x.axis.ticks  0.09355059 0.1013465 0.1091424 0.1169382 0.1247341 0.132530
heterogeneity 2.64307482 2.4593863 2.2948560 2.1464867 2.0119175 1.889257
                  [,19]     [,20]     [,21]     [,22]     [,23]     [,24]
x.axis.ticks  0.1403259 0.1481218 0.1559177 0.1637135 0.1715094 0.1793053
heterogeneity 1.7769674 1.6737817 1.5786447 1.4906679 1.4090967 1.3332846
                  [,25]     [,26]     [,27]     [,28]     [,29]     [,30]
x.axis.ticks  0.1871012 0.1948971 0.2026929 0.2104888 0.2182847 0.2260806
heterogeneity 1.2626737 1.1967794 1.1351779 1.0774966 1.0234063 0.9726146
                  [,31]     [,32]     [,33]     [,34]    [,35]     [,36]
x.axis.ticks  0.2338765 0.2416724 0.2494682 0.2572641 0.265060 0.2728559
heterogeneity 0.9248607 0.8799111 0.8375559 0.7976056 0.759889 0.7242504
                  [,37]     [,38]     [,39]     [,40]     [,41]     [,42]
x.axis.ticks  0.2806518 0.2884477 0.2962435 0.3040394 0.3118353 0.3196312
heterogeneity 0.6905482 0.6586533 0.6284473 0.5998218 0.5726772 0.5469218
                  [,43]     [,44]     [,45]     [,46]     [,47]     [,48]
x.axis.ticks  0.3274271 0.3352229 0.3430188 0.3508147 0.3586106 0.3664065
heterogeneity 0.5224707 0.4992458 0.4771746 0.4561899 0.4362293 0.4172348
                  [,49]     [,50]     [,51]     [,52]     [,53]     [,54]
x.axis.ticks  0.3742024 0.3819982 0.3897941 0.3975900 0.4053859 0.4131818
heterogeneity 0.3991523 0.3819313 0.3655250 0.3498891 0.3349827 0.3207670
                  [,55]     [,56]     [,57]     [,58]     [,59]     [,60]
x.axis.ticks  0.4209777 0.4287735 0.4365694 0.4443653 0.4521612 0.4599571
heterogeneity 0.3072061 0.2942659 0.2819145 0.2701221 0.2588604 0.2481029
                  [,61]     [,62]     [,63]     [,64]     [,65]     [,66]
x.axis.ticks  0.4677530 0.4755488 0.4833447 0.4911406 0.4989365 0.5067324
heterogeneity 0.2378245 0.2280018 0.2186123 0.2096352 0.2010505 0.1928395
                  [,67]     [,68]     [,69]     [,70]     [,71]     [,72]
x.axis.ticks  0.5145282 0.5223241 0.5301200 0.5379159 0.5457118 0.5535077
heterogeneity 0.1849844 0.1774684 0.1702756 0.1633910 0.1568002 0.1504896
                  [,73]     [,74]     [,75]     [,76]     [,77]     [,78]
x.axis.ticks  0.5613035 0.5690994 0.5768953 0.5846912 0.5924871 0.6002830
heterogeneity 0.1444466 0.1386587 0.1331146 0.1278030 0.1227137 0.1178366
                  [,79]     [,80]     [,81]     [,82]      [,83]     [,84]
x.axis.ticks  0.6080788 0.6158747 0.6236706 0.6314665 0.63926237 0.6470582
heterogeneity 0.1131624 0.1086819 0.1043867 0.1002686 0.09631986 0.0925331
                   [,85]      [,86]      [,87]      [,88]      [,89]      [,90]
x.axis.ticks  0.65485413 0.66265001 0.67044590 0.67824178 0.68603766 0.69383354
heterogeneity 0.08890129 0.08541771 0.08207597 0.07886998 0.07579392 0.07284226
                  [,91]      [,92]      [,93]      [,94]      [,95]      [,96]
x.axis.ticks  0.7016294 0.70942531 0.71722119 0.72501707 0.73281296 0.74060884
heterogeneity 0.0700097 0.06729119 0.06468192 0.06217727 0.05977286 0.05746448
                   [,97]      [,98]      [,99]     [,100]
x.axis.ticks  0.74840472 0.75620061 0.76399649 0.77179237
heterogeneity 0.05524813 0.05311997 0.05107634 0.04911374
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.compress.cbs")
> ### * bgnbd.compress.cbs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.compress.cbs
> ### Title: Compress Customer-by-Sufficient-Statistic Matrix
> ### Aliases: bgnbd.compress.cbs
> 
> ### ** Examples
> 
> # Create a sample customer-by-sufficient-statistic matrix:
> set.seed(7)
> x <- sample(1:4, 10, replace = TRUE)
> t.x <- sample(1:4, 10, replace = TRUE)
> T.cal <- rep(4, 10)
> ave.spend <- sample(10:20, 10, replace = TRUE)
> cbs <- cbind(x, t.x, T.cal, ave.spend)
> cbs
      x t.x T.cal ave.spend
 [1,] 4   1     4        17
 [2,] 2   1     4        13
 [3,] 1   4     4        20
 [4,] 1   1     4        19
 [5,] 1   2     4        20
 [6,] 4   1     4        10
 [7,] 2   3     4        16
 [8,] 4   1     4        15
 [9,] 1   4     4        20
[10,] 2   2     4        13
> 
> # If cbs is printed, you would note that the following
> # sets of rows have the same x, t.x and T.cal:
> # (1, 6, 8); (3, 9)
> 
> bgnbd.compress.cbs(cbs, 0)   # No rounding necessary
Data reduced from 10 rows to 7 rows.
     x t.x T.cal ave.spend custs
[1,] 1   1     4        19     1
[2,] 2   1     4        13     1
[3,] 4   1     4        42     3
[4,] 1   2     4        20     1
[5,] 2   2     4        13     1
[6,] 2   3     4        16     1
[7,] 1   4     4        40     2
> 
> # Note that all additional columns (in this case, ave.spend)
> # are aggregated by sum.
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.pmf.General")
> ### * bgnbd.pmf.General
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.pmf.General
> ### Title: Generalized BG/NBD Probability Mass Function
> ### Aliases: bgnbd.pmf.General
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> # probability that a customer will make 10 repeat transactions in the
> # time interval (1,2]
> bgnbd.pmf.General(params, t.start=1, t.end=2, x=10)
[1] 5.90195e-10
> # probability that a customer will make no repeat transactions in the
> # time interval (39,78]
> bgnbd.pmf.General(params, t.start=39, t.end=78, x=0)
[1] 0.5737864
> 
> 
> 
> cleanEx()
> nameEx("bgnbd.pmf")
> ### * bgnbd.pmf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bgnbd.pmf
> ### Title: BG/NBD Probability Mass Function
> ### Aliases: bgnbd.pmf
> 
> ### ** Examples
> 
> params <- c(0.243, 4.414, 0.793, 2.426)
> # probability that a customer will make 10 repeat transactions in the
> # time interval (0,2]
> bgnbd.pmf(params, t=2, x=10)
[1] 1.07869e-07
> # probability that a customer will make no repeat transactions in the
> # time interval (0,39]
> bgnbd.pmf(params, t=39, x=0)
[1] 0.5737864
> 
> # Vectors may also be used as arguments:
> bgnbd.pmf(params, t=30, x=11:20)
 [1] 0.0019995214 0.0015170236 0.0011633150 0.0009003148 0.0007023638
 [6] 0.0005517902 0.0004361913 0.0003467171 0.0002769613 0.0002222260
> 
> 
> 
> cleanEx()
> nameEx("dc.BuildCBSFromCBTAndDates")
> ### * dc.BuildCBSFromCBTAndDates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.BuildCBSFromCBTAndDates
> ### Title: Build CBS matrix from CBT matrix
> ### Aliases: dc.BuildCBSFromCBTAndDates
> 
> ### ** Examples
> 
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> 
> # Transaction-flow models are about interpurchase times. Since we
> # only know purchase times to the day, we merge all transaction on
> # the same day. This example uses dc.MergeTransactionsOnSameDate
> # to illustrate this; however, we could have simply used dc.CreateReachCBT
> # instead of dc.CreateFreqCBT to obtain the same result.
> merged.elog <- dc.MergeTransactionsOnSameDate(elog)
Started merging same-date transactions...
... Finished merging same-date transactions.
> cutoff.date <- as.Date("1997-09-30")
> freq.cbt <- dc.CreateFreqCBT(merged.elog)
...Completed Freq CBT
> cal.freq.cbt <- freq.cbt[,as.Date(colnames(freq.cbt)) <= cutoff.date]
> holdout.freq.cbt <- freq.cbt[,as.Date(colnames(freq.cbt)) > cutoff.date]
> 
> cal.start.dates.indices <- dc.GetFirstPurchasePeriodsFromCBT(cal.freq.cbt)
> cal.start.dates <- as.Date(colnames(cal.freq.cbt)[cal.start.dates.indices])
> cal.end.dates.indices <- dc.GetLastPurchasePeriodsFromCBT(cal.freq.cbt)
> cal.end.dates <- as.Date(colnames(cal.freq.cbt)[cal.end.dates.indices])
> T.cal.total <- rep(cutoff.date, nrow(cal.freq.cbt))
> cal.dates <- data.frame(cal.start.dates, cal.end.dates, T.cal.total)
> 
> # Create calibration period customer-by-sufficient-statistic data frame,
> # using weeks as the unit of time.
> cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.freq.cbt, cal.dates,
+ 	per="week", cbt.is.during.cal.period=TRUE)
Started making calibration period CBS...
Finished building CBS.
> # Force the calibration period customer-by-sufficient-statistic to only contain
> # repeat transactions (required by BG/BB and Pareto/NBD models)
> cal.cbs[,"x"] <- cal.cbs[,"x"] - 1
> 
> holdout.start <- cutoff.date+1
> holdout.end <- as.Date(colnames(holdout.freq.cbt)[ncol(holdout.freq.cbt)])
> holdout.dates <- c(holdout.start, holdout.end)
> 
> # Create holdout period customer-by-sufficient-statistic data frame, using weeks
> # as the unit of time.
> holdout.cbs <- dc.BuildCBSFromCBTAndDates(holdout.freq.cbt, holdout.dates,
+ 	per="week", cbt.is.during.cal.period=FALSE)
Started making holdout period CBS...
Finished building CBS.
> 
> 
> 
> cleanEx()
> nameEx("dc.CreateFreqCBT")
> ### * dc.CreateFreqCBT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.CreateFreqCBT
> ### Title: Create Frequency Customer-by-Time Matrix
> ### Aliases: dc.CreateFreqCBT
> 
> ### ** Examples
> 
> # Create event log from file "cdnowElog.csv", which has
> # customer IDs in the second column, dates in the third column, and
> # sales numbers in the fifth column.
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> 
> # Given that the dates are in the order year-month-day,
> # it is not strictly necessary to convert the date column
> # to date formats. However, it is good practice:
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> 
> freq.cbt <- dc.CreateFreqCBT(elog)
...Completed Freq CBT
> 
> 
> 
> cleanEx()
> nameEx("dc.CreateReachCBT")
> ### * dc.CreateReachCBT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.CreateReachCBT
> ### Title: Create Reach Customer-by-Time Matrix
> ### Aliases: dc.CreateReachCBT
> 
> ### ** Examples
> 
> # Create event log from file "cdnowElog.csv", which has
> # customer IDs in the second column, dates in the third column, and
> # sales numbers in the fifth column.
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> 
> # Given that the dates are in the order year-month-day,
> # it is not strictly necessary to convert the date column
> # to date formats. However, it is good practice:
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> 
> reach.cbt <- dc.CreateReachCBT(elog)
...Completed Reach CBT
> 
> 
> 
> cleanEx()
> nameEx("dc.CreateSpendCBT")
> ### * dc.CreateSpendCBT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.CreateSpendCBT
> ### Title: Create Spend Customer-by-Time Matrix
> ### Aliases: dc.CreateSpendCBT
> 
> ### ** Examples
> 
> # Create event log from file "cdnowElog.csv", which has
> # customer IDs in the second column, dates in the third column, and
> # sales numbers in the fifth column.
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5);
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> 
> # Given that the dates are in the order year-month-day,
> # it is not strictly necessary to convert the date column
> # to date formats. However, it is good practice:
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> 
> spend.cbt <- dc.CreateSpendCBT(elog)
...Completed Spend CBT
> 
> 
> 
> cleanEx()
> nameEx("dc.ElogToCbsCbt")
> ### * dc.ElogToCbsCbt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.ElogToCbsCbt
> ### Title: Convernt Event Log to CBS and CBT Matrices
> ### Aliases: dc.ElogToCbsCbt
> 
> ### ** Examples
> 
> # Create event log from file "cdnowElog.csv", which has
> # customer IDs in the second column, dates in the third column, and
> # sales numbers in the fifth column.
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> 
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> 
> data <- dc.ElogToCbsCbt(elog, per="week", T.cal=as.Date("1997-09-30"))
Started making CBS and CBT from the ELOG...
...Completed Freq CBT
Finished filtering out customers not in the birth period.
No dissipation requested.
Started merging same-date transactions...
... Finished merging same-date transactions.
Started Creating Repeat Purchases
Finished Creating Repeat Purchases
Started Building CBS and CBT for calibration period...
Started Building CBT...
...Completed Freq CBT
Started Building CBT...
...Completed Freq CBT
Started making calibration period CBS...
Finished building CBS.
Finished building CBS and CBT for calibration period.
Started building CBS and CBT for holdout period...
Started Building CBT...
...Completed Freq CBT
Started making holdout period CBS...
Finished building CBS.
Finished building CBS and CBT for holdout.
...Finished Making All CBS and CBT
> 
> 
> 
> cleanEx()
> nameEx("dc.MakeRFmatrixCal")
> ### * dc.MakeRFmatrixCal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.MakeRFmatrixCal
> ### Title: Make Calibration Period Recency-Frequency Matrix
> ### Aliases: dc.MakeRFmatrixCal
> 
> ### ** Examples
> 
> elog <- dc.ReadLines(system.file("data/discreteSimElog.csv", package="BTYD"),1,2)
Started reading file. Progress:
1000/52432
2000/52432
3000/52432
4000/52432
5000/52432
6000/52432
7000/52432
8000/52432
9000/52432
10000/52432
11000/52432
12000/52432
13000/52432
14000/52432
15000/52432
16000/52432
17000/52432
18000/52432
19000/52432
20000/52432
21000/52432
22000/52432
23000/52432
24000/52432
25000/52432
26000/52432
27000/52432
28000/52432
29000/52432
30000/52432
31000/52432
32000/52432
33000/52432
34000/52432
35000/52432
36000/52432
37000/52432
38000/52432
39000/52432
40000/52432
41000/52432
42000/52432
43000/52432
44000/52432
45000/52432
46000/52432
47000/52432
48000/52432
49000/52432
50000/52432
51000/52432
52000/52432
File successfully read.
> elog[,"date"] <- as.Date(elog[,"date"])
> 
> cutoff.date <- as.Date("1977-01-01")
> cbt <- dc.CreateReachCBT(elog)
...Completed Reach CBT
> cal.cbt <- cbt[,as.Date(colnames(cbt)) <= cutoff.date]
> holdout.cbt <- cbt[,as.Date(colnames(cbt)) > cutoff.date]
> 
> cal.start.dates.indices <- dc.GetFirstPurchasePeriodsFromCBT(cal.cbt)
> cal.start.dates <- as.Date(colnames(cal.cbt)[cal.start.dates.indices])
> cal.end.dates.indices <- dc.GetLastPurchasePeriodsFromCBT(cal.cbt)
> cal.end.dates <- as.Date(colnames(cal.cbt)[cal.end.dates.indices])
> T.cal.total <- rep(cutoff.date, nrow(cal.cbt))
> cal.dates <- data.frame(cal.start.dates, cal.end.dates, T.cal.total)
> 
> # Create calibration period customer-by-sufficient-statistic data frame,
> # using years as the unit of time.
> cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.cbt, cal.dates, per="year",
+ 	cbt.is.during.cal.period=TRUE)
Started making calibration period CBS...
Finished building CBS.
> 
> holdout.start <- as.Date(colnames(holdout.cbt)[1])
> holdout.end <- as.Date(tail(colnames(holdout.cbt),n=1))
> # The (-1) below is to remove the effect of the birth period - we are only
> # interested in repeat transactions in the calibration period.
> frequencies <- (cal.cbs[,"x"] - 1)
> periods.of.final.purchases <- cal.cbs[,"t.x"]
> num.of.purchase.periods <- ncol(cal.cbt) - 1
> 
> # Create a calibration period recency-frequency matrix
> cal.rf.matrix <- dc.MakeRFmatrixCal(frequencies, periods.of.final.purchases,
+ 	num.of.purchase.periods)
> 
> 
> 
> cleanEx()
> nameEx("dc.MergeCustomers")
> ### * dc.MergeCustomers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.MergeCustomers
> ### Title: Merge Customers
> ### Aliases: dc.MergeCustomers
> 
> ### ** Examples
> 
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> cutoff.date <- as.Date("1997-09-30")
> cal.elog <- elog[which(elog[,"date"] <= cutoff.date),]
> holdout.elog <- elog[which(elog[,"date"] > cutoff.date),]
> 
> # Create calibration period CBT from cal.elog
> cal.reach.cbt <- dc.CreateReachCBT(cal.elog)
...Completed Reach CBT
> # Create holdout period CBT from holdout.elog
> holdout.reach.cbt <- dc.CreateReachCBT(holdout.elog)
...Completed Reach CBT
> 
> # Note the difference:
> nrow(cal.reach.cbt)            # 2357 customers
[1] 2357
> nrow(holdout.reach.cbt)        # 684 customers
[1] 684
> 
> # Create a "fixed" holdout period CBT, with the same number
> # of customers in the same order as the calibration period CBT
> fixed.holdout.reach.cbt <- dc.MergeCustomers(cal.reach.cbt, holdout.reach.cbt)
> nrow(fixed.holdout.reach.cbt)  # 2357 customers
[1] 2357
> 
> # You can verify that the above is correct by turning these into a CBS
> # (see \code{dc.BuildCBSFromCBTAndDates} and using
> # \code{pnbd.PlotFreqVsConditionalExpectedFrequency}, for example
> 
> # Alternatively, we can fix the CBS, instead of the CBS:
> 
> cal.start.dates.indices <- dc.GetFirstPurchasePeriodsFromCBT(cal.reach.cbt)
> cal.start.dates <- as.Date(colnames(cal.reach.cbt)[cal.start.dates.indices])
> cal.end.dates.indices <- dc.GetLastPurchasePeriodsFromCBT(cal.reach.cbt)
> cal.end.dates <- as.Date(colnames(cal.reach.cbt)[cal.end.dates.indices])
> T.cal.total <- rep(cutoff.date, nrow(cal.reach.cbt))
> cal.dates <- data.frame(cal.start.dates, cal.end.dates, T.cal.total)
> 
> # Create calibration period customer-by-sufficient-statistic data frame,
> # using weeks as the unit of time.
> cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.reach.cbt, cal.dates, per="week",
+ 	cbt.is.during.cal.period=TRUE)
Started making calibration period CBS...
Finished building CBS.
> 
> # Force the calibration period customer-by-sufficient-statistic to only
> # 	contain repeat transactions (required by BG/BB and Pareto/NBD models)
> cal.cbs[,"x"] <- cal.cbs[,"x"] - 1
> 
> holdout.start <- cutoff.date+1
> holdout.end <- as.Date(colnames(fixed.holdout.reach.cbt)[ncol(fixed.holdout.reach.cbt)])
> holdout.dates <- c(holdout.start, holdout.end)
> 
> # Create holdout period customer-by-sufficient-statistic data frame,
> # using weeks as the unit of time.
> holdout.cbs <- dc.BuildCBSFromCBTAndDates(holdout.reach.cbt, holdout.dates,
+ 	per="week", cbt.is.during.cal.period=FALSE)
Started making holdout period CBS...
Finished building CBS.
> 
> # Note the difference:
> nrow(cal.cbs)            # 2357 customers
[1] 2357
> nrow(holdout.cbs)        # 684 customers
[1] 684
> 
> # Create a "fixed" holdout period CBS, with the same number
> # of customers in the same order as the calibration period CBS
> fixed.holdout.cbs <- dc.MergeCustomers(cal.cbs, holdout.cbs)
> nrow(fixed.holdout.cbs)  # 2357 customers
[1] 2357
> 
> # Furthermore, this function will assign a zero value to all fields
> # that were not in the original holdout period CBS. Since T.star is the
> # same for all customers in the holdout period, we should fix that:
> fixed.holdout.cbs[,"T.star"] <- rep(max(fixed.holdout.cbs[,"T.star"]),nrow(fixed.holdout.cbs))
> 
> 
> 
> cleanEx()
> nameEx("dc.PlotLogLikelihoodContour")
> ### * dc.PlotLogLikelihoodContour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.PlotLogLikelihoodContour
> ### Title: Plot Log-Likelihood Contour
> ### Aliases: dc.PlotLogLikelihoodContour
> 
> ### ** Examples
> 
> # **Examples for BG/BB model:
> data(donationsSummary)
> rf.matrix <- donationsSummary$rf.matrix
> 
> # starting-point parameters
> bgbb.startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> bgbb.est.params <- bgbb.EstimateParameters(rf.matrix, bgbb.startingparams)
> 
> # set up parameter names for a more descriptive result
> bgbb.param.names <- c("alpha", "beta", "gamma", "delta")
> 
> # plot a log-likelihood contour of alpha and beta, the unobserved
> # parameters for the beta-Bernoulli transaction process of the BG/BB.
> # Note that allow.neg.params has been set to false as BG/BB parameters
> # cannot be negative (not run):
> # dc.PlotLogLikelihoodContour(bgbb.rf.matrix.LL, c("vary", "vary", "fix", "fix"),
> #                            bgbb.est.params, rf.matrix = rf.matrix, n.divs = 15,
> #                            num.contour.lines = 15, zoom.percent = 0.2,
> #                            allow.neg.params = FALSE, param.names = bgbb.param.names)
> 
> # plot a log-likelihood contour of gamma and delta, the unobserved
> # parameters for the beta-geometric dropout process of the BG/BB.
> # Note that allow.neg.params has been set to false as BG/BB parameters
> # cannot be negative (not run):
> # dc.PlotLogLikelihoodContour(bgbb.rf.matrix.LL, c("fix", "fix", "vary", "vary"),
> #                            bgbb.est.params, rf.matrix = rf.matrix, n.divs = 15,
> #                            num.contour.lines = 15, zoom.percent = 0.2,
> #                            allow.neg.params = FALSE, param.names = bgbb.param.names)
> 
> # **Example for Pareto/NBD model:
> data(cdnowSummary)
> cbs <- cdnowSummary$cbs
> 
> # Speed up calculations:
> cbs <- pnbd.compress.cbs(cbs)
Data reduced from 2357 rows to 1016 rows.
> 
> # parameters estimated using pnbd.EstimateParameters
> pnbd.est.params <- cdnowSummary$est.params
> 
> # set up parameter names for a more descriptive result
> pnbd.param.names <- c("r", "alpha", "s", "beta")
> 
> # plot a log-likelihood contour of r and s, the shape parameters
> # of the transaction and dropout process models (respectively).
> # Note that allow.neg.params has been set to false as Pareto/NBD
> # parameters cannot be negative (not run):
> # dc.PlotLogLikelihoodContour(pnbd.cbs.LL, c("vary", "fix", "vary", "fix"),
> #                            pnbd.est.params, cal.cbs = cbs, n.divs = 20,
> #                            num.contour.lines = 20, zoom.percent = 0.1,
> #                            allow.neg.params = FALSE, param.names = pnbd.param.names)
> 
> # **Example for BG/NBD model:
> data(cdnowSummary)
> cbs <- cdnowSummary$cbs
> 
> # parameters estimated using bgnbd.EstimateParameters
> bgnbd.est.params <- cdnowSummary$est.params
> 
> # set up parameter names for a more descriptive result
> bgnbd.param.names <- c("r", "alpha", "s", "beta")
> 
> # plot a log-likelihood contour of r and s, the shape parameters
> # of the transaction and dropout process models (respectively).
> # Note that allow.neg.params has been set to false as BG/NBD
> # parameters cannot be negative (not run):
> # dc.PlotLogLikelihoodContour(bgnbd.cbs.LL, c("vary", "fix", "vary", "fix"),
> #                            bgnbd.est.params, cal.cbs = cbs, n.divs = 20,
> #                            num.contour.lines = 20, zoom.percent = 0.1,
> #                            allow.neg.params = FALSE, param.names = bgnbd.param.names)
> 
> 
> 
> cleanEx()
> nameEx("dc.PlotLogLikelihoodContours")
> ### * dc.PlotLogLikelihoodContours
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.PlotLogLikelihoodContours
> ### Title: Plot Log-Likelihood Contour
> ### Aliases: dc.PlotLogLikelihoodContours
> 
> ### ** Examples
> 
> # **Example for BG/BB model:
> data(donationsSummary)
> rf.matrix <- donationsSummary$rf.matrix
> 
> # starting-point parameters
> bgbb.startingparams <- c(1, 1, 0.5, 3)
> # estimated parameters
> bgbb.est.params <- bgbb.EstimateParameters(rf.matrix, bgbb.startingparams)
> 
> # set up parameter names for a more descriptive result
> bgbb.param.names <- c("alpha", "beta", "gamma", "delta")
> 
> # plot-log likelihood contours (not run):
> # dc.PlotLogLikelihoodContours(bgbb.rf.matrix.LL, bgbb.est.params, rf.matrix = rf.matrix,
> # 	n.divs = 5, num.contour.lines = 8, zoom.percent = 0.3, allow.neg.params = FALSE,
> #	param.names = bgbb.param.names)
> 
> # **Example for Pareto/NBD model:
> data(cdnowSummary)
> cbs <- cdnowSummary$cbs
> 
> # Speed up calculations:
> cbs <- pnbd.compress.cbs(cbs)
Data reduced from 2357 rows to 1016 rows.
> 
> # parameters estimated using pnbd.EstimateParameters
> pnbd.est.params <- cdnowSummary$est.params
> 
> # set up parameter names for a more descriptive result
> pnbd.param.names <- c("r", "alpha", "s", "beta")
> 
> # plot log-likelihood contours (not run):
> # dc.PlotLogLikelihoodContours(pnbd.cbs.LL, pnbd.est.params, cal.cbs = cbs, n.divs = 5,
> #                           num.contour.lines = 15, zoom.percent = 0.3,
> #                            allow.neg.params = FALSE, param.names = pnbd.param.names)
> 
> # **Example for BG/NBD model:
> data(cdnowSummary)
> cbs <- cdnowSummary$cbs
> 
> # parameters estimated using bgnbd.EstimateParameters
> bgnbd.est.params <- cdnowSummary$est.params
> 
> # set up parameter names for a more descriptive result
> bgnbd.param.names <- c("r", "alpha", "s", "beta")
> 
> # plot log-likelihood contours (not run):
> # dc.PlotLogLikelihoodContours(bgnbd.cbs.LL, bgnbd.est.params, cal.cbs = cbs, n.divs = 5,
> #                            num.contour.lines = 15, zoom.percent = 0.3,
> #                            allow.neg.params = FALSE, param.names = bgnbd.param.names)
> 
> 
> 
> cleanEx()
> nameEx("dc.ReadLines")
> ### * dc.ReadLines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.ReadLines
> ### Title: Read Lines
> ### Aliases: dc.ReadLines
> 
> ### ** Examples
> 
> # Create event log from file "cdnowElog.csv", which has
> # customer IDs in the second column, dates in the third column, and
> # sales numbers in the fifth column.
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> 
> # convert date column to date objects, as required by some other functions
> elog$date <- as.Date(elog$date, "$Y%m%d")
> 
> 
> 
> cleanEx()
> nameEx("dc.RemoveTimeBetween")
> ### * dc.RemoveTimeBetween
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dc.RemoveTimeBetween
> ### Title: Remove Time Between
> ### Aliases: dc.RemoveTimeBetween
> 
> ### ** Examples
> 
> elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3,5)
Started reading file. Progress:
1000/6919
2000/6919
3000/6919
4000/6919
5000/6919
6000/6919
File successfully read.
> elog[,"date"] <- as.Date(elog[,"date"], "%Y%m%d")
> 
> # Use the cdnow data to return a 6 month event log for January, February,
> # March, October, November, December.
> period.one.start <- as.Date("1997-01-01")
> period.one.end <- as.Date("1997-03-31")
> period.two.start <- as.Date("1997-10-01")
> period.two.end <- as.Date("1997-12-31")
> reduced.elog <- dc.RemoveTimeBetween(elog, period.one.start, period.one.end,
+                                      period.two.start, period.two.end)
> 
> # Note that the new elog will go up to June 30 at a maximum, since we
> # are only using 6 months of data starting on January 1
> max(reduced.elog$elog3$date)  # "1997-06-30"
[1] "1997-06-30"
> 
> 
> 
> cleanEx()
> nameEx("pnbd.ConditionalExpectedTransactions")
> ### * pnbd.ConditionalExpectedTransactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.ConditionalExpectedTransactions
> ### Title: Pareto/NBD Conditional Expected Transactions
> ### Aliases: pnbd.ConditionalExpectedTransactions
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> # Number of transactions a customer is expected to make in 2 time
> # intervals, given that they made 10 repeat transactions in a time period
> # of 39 intervals, with the 10th repeat transaction occurring in the 35th
> # interval.
> pnbd.ConditionalExpectedTransactions(params, T.star=2, x=10, t.x=35, T.cal=39)
[1] 0.3884117
> 
> # We can also compare expected transactions across different
> # calibration period behaviors:
> pnbd.ConditionalExpectedTransactions(params, T.star=2, x=5:20, t.x=25, T.cal=39)
 [1] 0.13442143 0.14451150 0.14936468 0.14913891 0.14433082 0.13573562
 [7] 0.12434874 0.11123391 0.09739276 0.08366633 0.07068324 0.05885291
[13] 0.04839093 0.03936096 0.03172004 0.02535901
> 
> 
> 
> cleanEx()
> nameEx("pnbd.DERT")
> ### * pnbd.DERT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.DERT
> ### Title: Pareto/NBD Discounted Expected Residual Transactions
> ### Aliases: pnbd.DERT
> 
> ### ** Examples
> 
> params <- c(0.5629966, 12.5590370, 0.4081095, 10.5148048)
> 
> # 15% compounded annually has been converted to 0.0027 compounded continuously,
> # as we are dealing with weekly data and not annual data.
> d <- 0.0027
> 
> # calculate the discounted expected residual transactions of a customer
> # who made 7 transactions in a calibration period that was 77.86
> # weeks long, with the last transaction occurring at the end of
> # the 35th week.
> pnbd.DERT(params, x=7, t.x=35, T.cal=77.86, d)
[1] 1.864183
> 
> # We can also use vectors to compute DERT for several customers:
> pnbd.DERT(params, x=1:10, t.x = 30, T.cal=77.86, d)
 [1] 2.1991554 2.8435344 2.8671284 2.4454101 1.8405019 1.2624165 0.8096181
 [8] 0.4948036 0.2920247 0.1679275
> 
> 
> 
> cleanEx()
> nameEx("pnbd.EstimateParameters")
> ### * pnbd.EstimateParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.EstimateParameters
> ### Title: Pareto/NBD Parameter Estimation
> ### Aliases: pnbd.EstimateParameters
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # starting-point parameters
> startingparams <- c(0.5, 6, 0.9, 8)
> # estimated parameters
> est.params <- pnbd.EstimateParameters(cal.cbs, startingparams)
> 
> # log-likelihood of estimated parameters
> pnbd.cbs.LL(est.params, cal.cbs)
[1] -9643.095
> 
> # compare the speed and results to the following:
> cal.cbs.compressed <- pnbd.compress.cbs(cal.cbs)
Data reduced from 2357 rows to 1016 rows.
> est.params <- pnbd.EstimateParameters(cal.cbs.compressed, startingparams)
> 
> 
> 
> cleanEx()
> nameEx("pnbd.Expectation")
> ### * pnbd.Expectation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.Expectation
> ### Title: Pareto/NBD Expectation
> ### Aliases: pnbd.Expectation
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> 
> # Number of repeat transactions a customer is expected to make in 2 time intervals.
> pnbd.Expectation(params, t=2)
[1] 0.09916088
> 
> # We can also compare expected transactions over time:
> pnbd.Expectation(params, t=1:10)
 [1] 0.05077821 0.09916088 0.14542507 0.18979930 0.23247466 0.27361274
 [7] 0.31335159 0.35181024 0.38909211 0.42528771
> 
> 
> 
> cleanEx()
> nameEx("pnbd.ExpectedCumulativeTransactions")
> ### * pnbd.ExpectedCumulativeTransactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.ExpectedCumulativeTransactions
> ### Title: Pareto/NBD Expected Cumulative Transactions
> ### Aliases: pnbd.ExpectedCumulativeTransactions
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> 
> # Returns a vector containing cumulative repeat transactions for 546 days.
> # All parameters are in weeks; the calibration period lasted 39 weeks
> # and the holdout period another 39.
> pnbd.ExpectedCumulativeTransactions(params, T.cal=cal.cbs[,"T.cal"],
+ 	T.tot=78, n.periods.final=546)
  [1]    0.1334305    0.4289596    0.8483403    1.4129240    2.1439146
  [6]    3.0549586    4.1966791    5.4636711    6.8995804    8.4587859
 [11]   10.1923808   12.1066124   14.2151066   16.4943370   18.9209633
 [16]   21.4940661   24.2127410   27.1131619   30.2090058   33.5435103
 [21]   37.0410012   40.7005051   44.5507148   48.5682298   52.7594832
 [26]   57.1160432   61.6591993   66.4026783   71.3601153   76.5079905
 [31]   81.7859043   87.2451030   92.8919814   98.7699587  104.8776655
 [36]  111.1322131  117.6663061  124.3522267  131.2262951  138.2726780
 [41]  145.5201425  152.9675976  160.5546656  168.2807238  176.1451560
 [46]  184.1251142  192.3165254  200.7256564  209.3364975  218.1183402
 [51]  227.0332968  236.0808269  245.3122850  254.6674559  264.2422424
 [56]  273.9909976  283.9499604  294.1032173  304.4201540  314.8703876
 [61]  325.4904775  336.2722373  347.2297832  358.4216069  369.7649300
 [66]  381.2591341  392.8961942  404.6977976  416.6558212  428.7696176
 [71]  441.0088953  453.3880646  465.9362549  478.6008409  491.4481933
 [76]  504.4330001  517.5770035  530.8573088  544.2215414  557.6547771
 [81]  571.1940874  584.8392011  598.6565627  612.6231716  626.5160551
 [86]  640.3362699  654.0848475  667.7627949  681.3710957  694.9107109
 [91]  708.3825791  721.7876180  735.1267244  748.4007754  761.6106285
 [96]  774.7571227  787.8410787  800.8632996  813.8245716  826.7256640
[101]  839.5673305  852.3503087  865.0753214  877.7430767  890.3542682
[106]  902.9095758  915.4096658  927.8551914  940.2467932  952.5850993
[111]  964.8707256  977.1042765  989.2863449 1001.4175124 1013.4983500
[116] 1025.5294180 1037.5112667 1049.4444360 1061.3294563 1073.1668484
[121] 1084.9571239 1096.7007854 1108.3983266 1120.0502325 1131.6569800
[126] 1143.2190375 1154.7368657 1166.2109173 1177.6416375 1189.0294640
[131] 1200.3748273 1211.6781507 1222.9398508 1234.1603371 1245.3400128
[136] 1256.4792746 1267.5785125 1278.6381109 1289.6584476 1300.6398950
[141] 1311.5828192 1322.4875812 1333.3545360 1344.1840334 1354.9764179
[146] 1365.7320288 1376.4512002 1387.1342614 1397.7815367 1408.3933458
[151] 1418.9700036 1429.5118203 1440.0191019 1450.4921498 1460.9312613
[156] 1471.3367291 1481.7088423 1492.0478854 1502.3541393 1512.6278808
[161] 1522.8693831 1533.0789155 1543.2567435 1553.4031292 1563.5183311
[166] 1573.6026042 1583.6562002 1593.6793672 1603.6723504 1613.6353913
[171] 1623.5687288 1633.4725982 1643.3472320 1653.1928596 1663.0097076
[176] 1672.7979997 1682.5579565 1692.2897961 1701.9937338 1711.6699822
[181] 1721.3187512 1730.9402481 1740.5346777 1750.1022423 1759.6431418
[186] 1769.1575735 1778.6457324 1788.1078111 1797.5440002 1806.9544875
[191] 1816.3394591 1825.6990986 1835.0335874 1844.3431051 1853.6278289
[196] 1862.8879341 1872.1235939 1881.3349796 1890.5222605 1899.6856039
[201] 1908.8251754 1917.9411386 1927.0336552 1936.1028853 1945.1489869
[206] 1954.1721167 1963.1724293 1972.1500777 1981.1052133 1990.0379858
[211] 1998.9485433 2007.8370323 2016.7035977 2025.5483829 2034.3715297
[216] 2043.1731785 2051.9534681 2060.7125359 2069.4505179 2078.1675486
[221] 2086.8637612 2095.5392874 2104.1942577 2112.8288011 2121.4430454
[226] 2130.0371169 2138.6111410 2147.1652415 2155.6995410 2164.2141611
[231] 2172.7092218 2181.1848423 2189.6411404 2198.0782327 2206.4962349
[236] 2214.8952613 2223.2754252 2231.6368388 2239.9796132 2248.3038585
[241] 2256.6096836 2264.8971965 2273.1665040 2281.4177121 2289.6509257
[246] 2297.8662487 2306.0637840 2314.2436335 2322.4058984 2330.5506785
[251] 2338.6780732 2346.7881807 2354.8810982 2362.9569222 2371.0157484
[256] 2379.0576713 2387.0827848 2395.0911820 2403.0829549 2411.0581950
[261] 2419.0169926 2426.9594376 2434.8856188 2442.7956244 2450.6895417
[266] 2458.5674573 2466.4294571 2474.2756260 2482.1060485 2489.9208082
[271] 2497.7199879 2505.5036698 2513.2719354 2521.0248655 2528.7625402
[276] 2536.4850388 2544.1924401 2551.8848223 2559.5622626 2567.2248379
[281] 2574.8726243 2582.5056972 2590.1241317 2597.7280018 2605.3173814
[286] 2612.8923433 2620.4529600 2627.9993034 2635.5314447 2643.0494546
[291] 2650.5534032 2658.0433602 2665.5193943 2672.9815742 2680.4299676
[296] 2687.8646420 2695.2856641 2702.6931002 2710.0870162 2717.4674772
[301] 2724.8345479 2732.1882927 2739.5287751 2746.8560586 2754.1702058
[306] 2761.4712789 2768.7593398 2776.0344497 2783.2966696 2790.5460597
[311] 2797.7826800 2805.0065900 2812.2178486 2819.4165145 2826.6026457
[316] 2833.7763000 2840.9375345 2848.0864062 2855.2229715 2862.3472863
[321] 2869.4594062 2876.5593864 2883.6472816 2890.7231463 2897.7870344
[326] 2904.8389995 2911.8790946 2918.9073728 2925.9238863 2932.9286872
[331] 2939.9218272 2946.9033576 2953.8733292 2960.8317928 2967.7787984
[336] 2974.7143960 2981.6386350 2988.5515646 2995.4532337 3002.3436906
[341] 3009.2229835 3016.0911602 3022.9482681 3029.7943544 3036.6294660
[346] 3043.4536492 3050.2669502 3057.0694149 3063.8610889 3070.6420173
[351] 3077.4122451 3084.1718168 3090.9207768 3097.6591692 3104.3870375
[356] 3111.1044253 3117.8113756 3124.5079313 3131.1941350 3137.8700290
[361] 3144.5356552 3151.1910553 3157.8362708 3164.4713429 3171.0963124
[366] 3177.7112201 3184.3161062 3190.9110108 3197.4959739 3204.0710350
[371] 3210.6362334 3217.1916081 3223.7371982 3230.2730420 3236.7991779
[376] 3243.3156441 3249.8224783 3256.3197182 3262.8074012 3269.2855642
[381] 3275.7542444 3282.2134782 3288.6633022 3295.1037526 3301.5348652
[386] 3307.9566760 3314.3692204 3320.7725337 3327.1666510 3333.5516072
[391] 3339.9274370 3346.2941748 3352.6518549 3359.0005113 3365.3401777
[396] 3371.6708879 3377.9926752 3384.3055729 3390.6096139 3396.9048311
[401] 3403.1912571 3409.4689243 3415.7378649 3421.9981110 3428.2496944
[406] 3434.4926468 3440.7269996 3446.9527841 3453.1700314 3459.3787724
[411] 3465.5790379 3471.7708583 3477.9542641 3484.1292855 3490.2959525
[416] 3496.4542949 3502.6043423 3508.7461244 3514.8796704 3521.0050095
[421] 3527.1221707 3533.2311828 3539.3320744 3545.4248742 3551.5096103
[426] 3557.5863110 3563.6550044 3569.7157181 3575.7684801 3581.8133178
[431] 3587.8502585 3593.8793296 3599.9005582 3605.9139710 3611.9195950
[436] 3617.9174568 3623.9075829 3629.8899995 3635.8647329 3641.8318092
[441] 3647.7912543 3653.7430938 3659.6873535 3665.6240588 3671.5532351
[446] 3677.4749076 3683.3891013 3689.2958412 3695.1951521 3701.0870587
[451] 3706.9715854 3712.8487567 3718.7185969 3724.5811301 3730.4363802
[456] 3736.2843713 3742.1251270 3747.9586710 3753.7850268 3759.6042178
[461] 3765.4162672 3771.2211981 3777.0190337 3782.8097967 3788.5935099
[466] 3794.3701961 3800.1398777 3805.9025771 3811.6583168 3817.4071187
[471] 3823.1490051 3828.8839979 3834.6121189 3840.3333898 3846.0478324
[476] 3851.7554680 3857.4563182 3863.1504041 3868.8377471 3874.5183681
[481] 3880.1922881 3885.8595280 3891.5201085 3897.1740504 3902.8213741
[486] 3908.4621001 3914.0962487 3919.7238403 3925.3448949 3930.9594325
[491] 3936.5674732 3942.1690367 3947.7641429 3953.3528113 3958.9350615
[496] 3964.5109130 3970.0803850 3975.6434970 3981.2002680 3986.7507172
[501] 3992.2948634 3997.8327257 4003.3643227 4008.8896733 4014.4087960
[506] 4019.9217093 4025.4284318 4030.9289817 4036.4233772 4041.9116367
[511] 4047.3937781 4052.8698194 4058.3397787 4063.8036736 4069.2615220
[516] 4074.7133415 4080.1591497 4085.5989640 4091.0328020 4096.4606808
[521] 4101.8826178 4107.2986302 4112.7087350 4118.1129491 4123.5112897
[526] 4128.9037734 4134.2904171 4139.6712374 4145.0462510 4150.4154744
[531] 4155.7789241 4161.1366165 4166.4885678 4171.8347943 4177.1753122
[536] 4182.5101375 4187.8392863 4193.1627745 4198.4806179 4203.7928324
[541] 4209.0994337 4214.4004375 4219.6958592 4224.9857145 4230.2700188
[546] 4235.5487874
> 
> 
> 
> cleanEx()
> nameEx("pnbd.LL")
> ### * pnbd.LL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.LL
> ### Title: Pareto/NBD Log-Likelihood
> ### Aliases: pnbd.LL pnbd.cbs.LL
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # random assignment of parameters
> params <- c(0.5, 8, 0.7, 10)
> # returns the log-likelihood of the given parameters
> pnbd.cbs.LL (params, cal.cbs)
[1] -10079.87
> 
> # compare the speed and results to the following:
> cal.cbs.compressed <- pnbd.compress.cbs(cal.cbs)
Data reduced from 2357 rows to 1016 rows.
> pnbd.cbs.LL (params, cal.cbs.compressed)
[1] -10079.87
> 
> # Returns the log likelihood of the parameters for a customer who
> # made 3 transactions in a calibration period that ended at t=6,
> # with the last transaction occurring at t=4.
> pnbd.LL(params, x=3, t.x=4, T.cal=6)
[1] -7.788162
> 
> # We can also give vectors as function parameters:
> set.seed(7)
> x <- sample(1:4, 10, replace = TRUE)
> t.x <- sample(1:4, 10, replace = TRUE)
> T.cal <- rep(4, 10)
> pnbd.LL(params, x, t.x, T.cal)
 [1] -8.189702 -5.485079 -3.616317 -3.453675 -3.523183 -8.189702 -5.648003
 [8] -8.189702 -3.616317 -5.580570
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PAlive")
> ### * pnbd.PAlive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PAlive
> ### Title: Pareto/NBD P(Alive)
> ### Aliases: pnbd.PAlive
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> 
> pnbd.PAlive(params, x=0, t.x=0, T.cal=39)
[1] 0.2924031
> # 0.2924031; P(Alive) of a customer who made no repeat transactions.
> 
> pnbd.PAlive(params, x=23, t.x=39, T.cal=39)
[1] 1
> # 1; P(Alive) of a customer who has the same recency and total
> # time observed.
> 
> pnbd.PAlive(params, x=5:20, t.x=30, T.cal=39)
 [1] 0.8096563 0.7901855 0.7687521 0.7452748 0.7197060 0.6920421 0.6623332
 [8] 0.6306915 0.5972971 0.5624001 0.5263181 0.4894276 0.4521506 0.4149357
[15] 0.3782371 0.3424920
> # Note the "increasing frequency paradox".
> 
> # To visualize the distribution of P(Alive) across customers:
> 
> data(cdnowSummary)
> cbs <- cdnowSummary$cbs
> params <- pnbd.EstimateParameters(cbs)
> p.alives <- pnbd.PAlive(params, cbs[,"x"], cbs[,"t.x"], cbs[,"T.cal"])
> plot(density(p.alives))
> 
> 
> 
> cleanEx()
> nameEx("pnbd.Plot.DERT")
> ### * pnbd.Plot.DERT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.Plot.DERT
> ### Title: Pareto/NBD Plot Discounted Expected Residual Transactions
> ### Aliases: pnbd.Plot.DERT
> 
> ### ** Examples
> 
> # The RFM and CLV paper uses all 78 weeks of the cdnow data to
> # estimate parameters. These parameters can be estimated as follows:
> 
> # elog <- dc.ReadLines(system.file("data/cdnowElog.csv", package="BTYD"),2,3)
> # cal.cbs <- dc.ElogToCbsCbt(elog)$cal$cbs
> # pnbd.EstimateParameters(cal.cbs)
> # (The final function was run several times with its own output as
> # input for starting parameters, to ensure that the result converged).
> 
> params <- c(0.5629966, 12.5590370, 0.4081095, 10.5148048)
> 
> # 15% compounded annually has been converted to 0.0027 compounded continously,
> # as we are dealing with weekly data and not annual data.
> d <- 0.0027
> 
> pnbd.Plot.DERT(params, x=0:14, t.x=0:77, T.cal=77.86, d, type="persp")
           0         1         2          3            4            5
0  0.3647559 0.3029433 0.1070528 0.02760827  0.006109792  0.001235674
1  0.3915147 0.3529963 0.1358554 0.03797641  0.009087219  0.001985554
2  0.4175055 0.4058375 0.1691606 0.05098713  0.013121248  0.003080527
3  0.4427670 0.4612242 0.2071934 0.06703754  0.018468488  0.004636970
4  0.4673343 0.5189135 0.2501466 0.08654405  0.025422729  0.006798282
5  0.4912395 0.5786638 0.2981777 0.10993895  0.034316734  0.009738672
6  0.5145125 0.6402372 0.3514064 0.13766644  0.045523672  0.013667108
7  0.5371807 0.7034003 0.4099128 0.17017795  0.059458132  0.018831420
8  0.5592698 0.7679268 0.4737353 0.20792690  0.076576583  0.025522489
9  0.5808038 0.8335977 0.5428700 0.25136273  0.097377187  0.034078461
10 0.6018050 0.9002031 0.6172700 0.30092443  0.122398817  0.044888911
11 0.6222945 0.9675425 0.6968454 0.35703345  0.152219146  0.058398832
12 0.6422923 1.0354260 0.7814646 0.42008621  0.187451666  0.075112329
13 0.6618169 1.1036746 0.8709558 0.49044634  0.228741488  0.095595855
14 0.6808860 1.1721202 0.9651089 0.56843674  0.276759790  0.120480780
15 0.6995163 1.2406064 1.0636784 0.65433173  0.332196793  0.150465074
16 0.7177237 1.3089879 1.1663871 0.74834949  0.395753182  0.186313826
17 0.7355232 1.3771311 1.2729294 0.85064502  0.468129925  0.228858309
18 0.7529290 1.4449133 1.3829757 0.96130392  0.550016503  0.278993235
19 0.7699546 1.5122228 1.4961769 1.08033715  0.642077639  0.337671879
20 0.7866130 1.5789585 1.6121688 1.20767714  0.744938705  0.405898680
21 0.8029164 1.6450294 1.7305769 1.34317531  0.859170050  0.484719002
22 0.8188765 1.7103542 1.8510208 1.48660130  0.985270656  0.575205723
23 0.8345045 1.7748609 1.9731188 1.63764387  1.123651556  0.678442439
24 0.8498111 1.8384862 2.0964919 1.79591372  1.274619609  0.795503153
25 0.8648064 1.9011751 2.2207679 1.96094791  1.438362255  0.927428488
26 0.8795002 1.9628803 2.3455846 2.13221615  1.614933954  1.075198658
27 0.8939018 2.0235614 2.4705933 2.30912840  1.804245003  1.239703686
28 0.9080201 2.0831850 2.5954611 2.49104390  2.006053409  1.421711601
29 0.9218637 2.1417236 2.7198730 2.67728112  2.219960405  1.621835661
30 0.9354408 2.1991554 2.8435344 2.86712839  2.445410079  1.840501924
31 0.9487592 2.2554640 2.9661714 3.05985490  2.681693393  2.077918700
32 0.9618265 2.3106373 3.0875325 3.25472171  2.927956686  2.334049617
33 0.9746499 2.3646678 3.2073887 3.45099243  3.183214503  2.608592073
34 0.9872363 2.4175519 3.3255337 3.64794332  3.446366377  2.900962772
35 0.9995926 2.4692891 3.4417838 3.84487254  3.716216975  3.210291812
36 1.0117250 2.5198825 3.5559775 4.04110839  3.991498831  3.535426419
37 1.0236397 2.5693377 3.6679748 4.23601628  4.270896765  3.874944874
38 1.0353429 2.6176629 3.7776562 4.42900449  4.553073026  4.227180588
39 1.0468400 2.6648684 3.8849220 4.61952864  4.836692180  4.590255592
40 1.0581368 2.7109666 3.9896909 4.80709486  5.120444816  4.962122069
41 1.0692384 2.7559712 4.0918988 4.99126165  5.403069294  5.340610015
42 1.0801501 2.7998977 4.1914979 5.17164074  5.683370849  5.723478697
43 1.0908767 2.8427626 4.2884548 5.34789684  5.960237607  6.108469362
44 1.1014231 2.8845837 4.3827500 5.51974652  6.232653221  6.493356680
45 1.1117939 2.9253793 4.4743759 5.68695636  6.499706027  6.875996564
46 1.1219935 2.9651688 4.5633359 5.84934050  6.760594802  7.254368417
47 1.1320261 3.0039720 4.6496435 6.00675769  7.014631321  7.626610337
48 1.1418960 3.0418090 4.7333206 6.15910807  7.261240043  7.991046359
49 1.1516072 3.0787005 4.8143969 6.30632969  7.499955310  8.346205389
50 1.1611635 3.1146673 4.8929085 6.44839494  7.730416496  8.690831989
51 1.1705686 3.1497303 4.9688974 6.58530694  7.952361548  9.023889592
52 1.1798263 3.1839105 5.0424103 6.71709603  8.165619358  9.344557057
53 1.1889400 3.2172289 5.1134981 6.84381633  8.370101351  9.652219675
54 1.1979131 3.2497065 5.1822147 6.96554245  8.565792666  9.946455808
55 1.2067489 3.2813640 5.2486171 7.08236645  8.752743212 10.227020389
56 1.2154506 3.3122221 5.3127640 7.19439500  8.931058878 10.493826388
57 1.2240212 3.3423011 5.3747158 7.30174670  9.100893066 10.746925250
58 1.2324638 3.3716211 5.4345339 7.40454975  9.262438714 10.986487155
59 1.2407813 3.4002020 5.4922806 7.50293977  9.415920904 11.212781778
60 1.2489765 3.4280633 5.5480182 7.59705787  9.561590121 11.426160043
61 1.2570520 3.4552242 5.6018090 7.68704898  9.699716189 11.627037263
62 1.2650106 3.4817035 5.6537151 7.77306034  9.830582895 11.815877858
63 1.2728548 3.5075196 5.7037981 7.85524021  9.954483283 11.993181786
64 1.2805871 3.5326907 5.7521187 7.93373674 10.071715585 12.159472707
65 1.2882099 3.5572344 5.7987367 8.00869705 10.182579753 12.315287830
66 1.2957256 3.5811679 5.8437108 8.08026643 10.287374540 12.461169370
67 1.3031364 3.6045083 5.8870986 8.14858763 10.386395082 12.597657470
68 1.3104446 3.6272718 5.9289563 8.21380039 10.479930927 12.725284466
69 1.3176522 3.6494746 5.9693387 8.27604096 10.568264464 12.844570334
70 1.3247615 3.6711323 6.0082993 8.33544174 10.651669695 12.956019176
71 1.3317744 3.6922603 6.0458901 8.39213108 10.730411313 13.060116605
72 1.3386928 3.7128732 6.0821613 8.44623304 10.804744032 13.157327875
73 1.3455189 3.7329857 6.1171619 8.49786728 10.874912143 13.248096665
74 1.3522543 3.7526117 6.1509392 8.54714901 10.941149254 13.332844372
75 1.3589009 3.7717648 6.1835391 8.59418890 11.003678179 13.411969848
76 1.3654605 3.7904585 6.2150058 8.63909317 11.062710957 13.485849465
77 1.3719348 3.8087055 6.2453821 8.68196354 11.118448970 13.554837461
              6            7            8            9           10
0  2.353232e-04 4.291480e-05 7.573634e-06 1.302665e-06 2.194650e-07
1  4.084110e-04 8.043498e-05 1.532920e-05 2.847123e-06 5.179447e-07
2  6.806280e-04 1.439714e-04 2.946754e-05 5.877699e-06 1.148283e-06
3  1.095279e-03 2.476528e-04 5.417994e-05 1.155087e-05 2.411898e-06
4  1.709600e-03 4.114897e-04 9.582421e-05 2.174495e-05 4.832817e-06
5  2.597866e-03 6.631858e-04 1.637868e-04 3.941631e-05 9.290163e-06
6  3.854905e-03 1.040336e-03 2.715995e-04 6.909145e-05 1.721320e-05
7  5.600064e-03 1.593064e-03 4.383640e-04 1.175335e-04 3.086191e-05
8  7.981617e-03 2.387150e-03 6.905413e-04 1.946295e-04 5.372221e-05
9  1.118164e-02 3.507701e-03 1.064175e-03 3.145530e-04 9.105257e-05
10 1.542134e-02 5.063429e-03 1.607620e-03 4.972672e-04 1.506275e-04
11 2.096685e-02 7.191575e-03 2.384852e-03 7.704422e-04 2.437336e-04
12 2.813543e-02 1.006354e-02 3.479460e-03 1.171875e-03 3.864862e-04
13 3.730205e-02 1.389130e-02 4.999392e-03 1.752508e-03 6.015476e-04
14 4.890626e-02 1.893454e-02 7.082575e-03 2.580164e-03 9.203447e-04
15 6.345929e-02 2.550873e-02 9.903504e-03 3.744116e-03 1.385900e-03
16 8.155118e-02 3.399390e-02 1.368090e-02 5.360642e-03 2.056414e-03
17 1.038577e-01 4.484434e-02 1.868655e-02 7.579710e-03 3.009745e-03
18 1.311469e-01 5.859895e-02 2.525543e-02 1.059297e-02 4.348986e-03
19 1.642851e-01 7.589237e-02 3.379714e-02 1.464324e-02 6.209325e-03
20 2.042414e-01 9.746645e-02 4.480884e-02 2.003564e-02 8.766435e-03
21 2.520905e-01 1.241821e-01 5.888955e-02 2.715060e-02 1.224665e-02
22 3.090140e-01 1.570309e-01 7.675585e-02 3.645895e-02 1.693920e-02
23 3.762980e-01 1.971462e-01 9.925889e-02 4.853913e-02 2.321086e-02
24 4.553273e-01 2.458129e-01 1.274025e-01 6.409684e-02 3.152329e-02
25 5.475756e-01 3.044753e-01 1.623618e-01 8.398703e-02 4.245339e-02
26 6.545896e-01 3.747418e-01 2.055024e-01 1.092382e-01 5.671702e-02
27 7.779681e-01 4.583853e-01 2.583982e-01 1.410789e-01 7.519642e-02
28 9.193335e-01 5.573384e-01 3.228479e-01 1.809661e-01 9.897128e-02
29 1.080297e+00 6.736809e-01 4.008887e-01 2.306143e-01 1.293538e-01
30 1.262416e+00 8.096181e-01 4.948036e-01 2.920247e-01 1.679275e-01
31 1.467147e+00 9.674500e-01 6.071231e-01 3.675132e-01 2.165888e-01
32 1.695785e+00 1.149526e+00 7.406153e-01 4.597339e-01 2.775911e-01
33 1.949412e+00 1.358191e+00 8.982639e-01 5.716961e-01 3.535893e-01
34 2.228830e+00 1.595708e+00 1.083229e+00 7.067711e-01 4.476823e-01
35 2.534505e+00 1.864183e+00 1.298790e+00 8.686832e-01 5.634491e-01
36 2.866506e+00 2.165462e+00 1.548262e+00 1.061481e+00 7.049754e-01
37 3.224467e+00 2.501028e+00 1.834894e+00 1.289481e+00 8.768615e-01
38 3.607544e+00 2.871897e+00 2.161736e+00 1.557179e+00 1.084206e+00
39 4.014406e+00 3.278509e+00 2.531485e+00 1.869124e+00 1.332553e+00
40 4.443231e+00 3.720635e+00 2.946318e+00 2.229748e+00 1.627794e+00
41 4.891735e+00 4.197303e+00 3.407708e+00 2.643156e+00 1.976012e+00
42 5.357212e+00 4.706751e+00 3.916248e+00 3.112873e+00 2.383261e+00
43 5.836603e+00 5.246414e+00 4.471486e+00 3.641564e+00 2.855273e+00
44 6.326578e+00 5.812954e+00 5.071808e+00 4.230742e+00 3.397096e+00
45 6.823629e+00 6.402335e+00 5.714356e+00 4.880491e+00 4.012674e+00
46 7.324171e+00 7.009929e+00 6.395027e+00 5.589224e+00 4.704395e+00
47 7.824644e+00 7.630668e+00 7.108539e+00 6.353524e+00 5.472649e+00
48 8.321610e+00 8.259212e+00 7.848581e+00 7.168092e+00 6.315438e+00
49 8.811838e+00 8.890137e+00 8.608034e+00 8.025815e+00 7.228113e+00
50 9.292377e+00 9.518112e+00 9.379242e+00 8.917982e+00 8.203275e+00
51 9.760608e+00 1.013807e+01 1.015433e+01 9.834624e+00 9.230903e+00
52 1.021428e+01 1.074537e+01 1.092551e+01 1.076496e+01 1.029870e+01
53 1.065154e+01 1.133589e+01 1.168539e+01 1.169791e+01 1.139268e+01
54 1.107091e+01 1.190610e+01 1.242722e+01 1.262261e+01 1.249787e+01
55 1.147130e+01 1.245315e+01 1.314512e+01 1.352888e+01 1.359916e+01
56 1.185198e+01 1.297481e+01 1.383416e+01 1.440765e+01 1.468208e+01
57 1.221254e+01 1.346951e+01 1.449048e+01 1.525124e+01 1.573352e+01
58 1.255285e+01 1.393629e+01 1.511125e+01 1.605353e+01 1.674227e+01
59 1.287306e+01 1.437468e+01 1.569463e+01 1.680999e+01 1.769937e+01
60 1.317350e+01 1.478472e+01 1.623969e+01 1.751769e+01 1.859823e+01
61 1.345468e+01 1.516681e+01 1.674631e+01 1.817509e+01 1.943460e+01
62 1.371725e+01 1.552170e+01 1.721501e+01 1.878193e+01 2.020637e+01
63 1.396195e+01 1.585035e+01 1.764685e+01 1.933895e+01 2.091326e+01
64 1.418962e+01 1.615393e+01 1.804329e+01 1.984776e+01 2.155654e+01
65 1.440112e+01 1.643373e+01 1.840611e+01 2.031054e+01 2.213863e+01
66 1.459735e+01 1.669113e+01 1.873725e+01 2.072992e+01 2.266279e+01
67 1.477920e+01 1.692754e+01 1.903880e+01 2.110877e+01 2.313284e+01
68 1.494759e+01 1.714436e+01 1.931287e+01 2.145013e+01 2.355289e+01
69 1.510339e+01 1.734301e+01 1.956156e+01 2.175702e+01 2.392720e+01
70 1.524745e+01 1.752482e+01 1.978693e+01 2.203245e+01 2.425996e+01
71 1.538059e+01 1.769112e+01 1.999095e+01 2.227927e+01 2.455522e+01
72 1.550360e+01 1.784313e+01 2.017550e+01 2.250023e+01 2.481682e+01
73 1.561721e+01 1.798203e+01 2.034233e+01 2.269785e+01 2.504835e+01
74 1.572213e+01 1.810892e+01 2.049308e+01 2.287452e+01 2.525311e+01
75 1.581903e+01 1.822481e+01 2.062927e+01 2.303238e+01 2.543408e+01
76 1.590850e+01 1.833065e+01 2.075229e+01 2.317341e+01 2.559400e+01
77 1.599113e+01 1.842732e+01 2.086341e+01 2.329940e+01 2.573529e+01
             11           12           13           14
0  3.634927e-08 5.935097e-09 9.574002e-10 1.528371e-10
1  9.262912e-08 1.633071e-08 2.844389e-09 4.902719e-10
2  2.205306e-07 4.175175e-08 7.809107e-09 1.445397e-09
3  4.950774e-07 1.001768e-07 2.002521e-08 3.961340e-09
4  1.055858e-06 2.273971e-07 4.838112e-08 1.018635e-08
5  2.152423e-06 4.915885e-07 1.109133e-07 2.476360e-08
6  4.215515e-06 1.017665e-06 2.426966e-07 5.727540e-08
7  7.965816e-06 2.026746e-06 5.094127e-07 1.267020e-07
8  1.457607e-05 3.898389e-06 1.029979e-06 2.692856e-07
9  2.590759e-05 7.266357e-06 2.013272e-06 5.519854e-07
10 4.484873e-05 1.316278e-05 3.816271e-06 1.094884e-06
11 7.579086e-05 2.323093e-05 7.034095e-06 2.107587e-06
12 1.252872e-04 4.003359e-05 1.263665e-05 3.947057e-06
13 2.029517e-04 6.749274e-05 2.217220e-05 7.207640e-06
14 3.226695e-04 1.115072e-04 3.806561e-05 1.285860e-05
15 5.042065e-04 1.808079e-04 6.404849e-05 2.245071e-05
16 7.753267e-04 2.881281e-04 1.057709e-04 3.842153e-05
17 1.174548e-03 4.517844e-04 1.716595e-04 6.454023e-05
18 1.754694e-03 6.977905e-04 2.741072e-04 1.065467e-04
19 2.587432e-03 1.062654e-03 4.311033e-04 1.730581e-04
20 3.769015e-03 1.597042e-03 6.684429e-04 2.768409e-04
21 5.427500e-03 2.370539e-03 1.022693e-03 4.365731e-04
22 7.731736e-03 3.477780e-03 1.545135e-03 6.792647e-04
23 1.090248e-02 5.046271e-03 2.306962e-03 1.043546e-03
24 1.522607e-02 7.246318e-03 3.406067e-03 1.584094e-03
25 2.107099e-02 1.030350e-02 4.975844e-03 2.377546e-03
26 2.890803e-02 1.451422e-02 7.196504e-03 3.530319e-03
27 3.933438e-02 2.026507e-02 1.030953e-02 5.188888e-03
28 5.310226e-02 2.805647e-02 1.463597e-02 7.553171e-03
29 7.115270e-02 3.853171e-02 2.059947e-02 1.089385e-02
30 9.465489e-02 5.251195e-02 2.875502e-02 1.557459e-02
31 1.250514e-01 7.103828e-02 3.982457e-02 2.208041e-02
32 1.641096e-01 9.542153e-02 5.474073e-02 3.105348e-02
33 2.139785e-01 1.273008e-01 7.470005e-02 4.333815e-02
34 2.772510e-01 1.687111e-01 1.012272e-01 6.003689e-02
35 3.570289e-01 2.221600e-01 1.362512e-01 8.257941e-02
36 4.569879e-01 2.907129e-01 1.821955e-01 1.128068e-01
37 5.814389e-01 3.780847e-01 2.420809e-01 1.530733e-01
38 7.353769e-01 4.887347e-01 3.196422e-01 2.063668e-01
39 9.245108e-01 6.279572e-01 4.194559e-01 2.764492e-01
40 1.155259e+00 8.019608e-01 5.470728e-01 3.680169e-01
41 1.434698e+00 1.017920e+00 7.091487e-01 4.868763e-01
42 1.770444e+00 1.283982e+00 9.135572e-01 6.401284e-01
43 2.170453e+00 1.609207e+00 1.169466e+00 8.363481e-01
44 2.642715e+00 2.003408e+00 1.487342e+00 1.085736e+00
45 3.194841e+00 2.476861e+00 1.878860e+00 1.400207e+00
46 3.833527e+00 3.039869e+00 2.356648e+00 1.793373e+00
47 4.563937e+00 3.702133e+00 2.933844e+00 2.280350e+00
48 5.389016e+00 4.471966e+00 3.623399e+00 2.877320e+00
49 6.308828e+00 5.355351e+00 4.437118e+00 3.600774e+00
50 7.319982e+00 6.354941e+00 5.384439e+00 4.466374e+00
51 8.415276e+00 7.469105e+00 6.471041e+00 5.487412e+00
52 9.583624e+00 8.691193e+00 7.697414e+00 6.672947e+00
53 1.081036e+01 1.000917e+01 9.057627e+00 8.025788e+00
54 1.207789e+01 1.140576e+01 1.053856e+01 9.540635e+00
55 1.336671e+01 1.285924e+01 1.211983e+01 1.120278e+01
56 1.465658e+01 1.434468e+01 1.377467e+01 1.298780e+01
57 1.592777e+01 1.583568e+01 1.547156e+01 1.486251e+01
58 1.716225e+01 1.730618e+01 1.717664e+01 1.678720e+01
59 1.834451e+01 1.873226e+01 1.885636e+01 1.871899e+01
60 1.946226e+01 2.009351e+01 2.048000e+01 2.061556e+01
61 2.050657e+01 2.137389e+01 2.202173e+01 2.243869e+01
62 2.147188e+01 2.256218e+01 2.346182e+01 2.415703e+01
63 2.235570e+01 2.365179e+01 2.478709e+01 2.574764e+01
64 2.315811e+01 2.464032e+01 2.599063e+01 2.719635e+01
65 2.388130e+01 2.552884e+01 2.707101e+01 2.849714e+01
66 2.452899e+01 2.632109e+01 2.803116e+01 2.965076e+01
67 2.510596e+01 2.702271e+01 2.887720e+01 3.066318e+01
68 2.561763e+01 2.764052e+01 2.961742e+01 3.154388e+01
69 2.606971e+01 2.818198e+01 3.026124e+01 3.230449e+01
70 2.646793e+01 2.865471e+01 3.081855e+01 3.295753e+01
71 2.681785e+01 2.906618e+01 3.129915e+01 3.351562e+01
72 2.712476e+01 2.942347e+01 3.171238e+01 3.399085e+01
73 2.739355e+01 2.973316e+01 3.206689e+01 3.439442e+01
74 2.762872e+01 3.000125e+01 3.237054e+01 3.473646e+01
75 2.783434e+01 3.023311e+01 3.263033e+01 3.502597e+01
76 2.801404e+01 3.043354e+01 3.285247e+01 3.527082e+01
77 2.817108e+01 3.060676e+01 3.304234e+01 3.547782e+01
> pnbd.Plot.DERT(params, x=0:14, t.x=0:77, T.cal=77.86, d, type="contour")
           0         1         2          3            4            5
0  0.3647559 0.3029433 0.1070528 0.02760827  0.006109792  0.001235674
1  0.3915147 0.3529963 0.1358554 0.03797641  0.009087219  0.001985554
2  0.4175055 0.4058375 0.1691606 0.05098713  0.013121248  0.003080527
3  0.4427670 0.4612242 0.2071934 0.06703754  0.018468488  0.004636970
4  0.4673343 0.5189135 0.2501466 0.08654405  0.025422729  0.006798282
5  0.4912395 0.5786638 0.2981777 0.10993895  0.034316734  0.009738672
6  0.5145125 0.6402372 0.3514064 0.13766644  0.045523672  0.013667108
7  0.5371807 0.7034003 0.4099128 0.17017795  0.059458132  0.018831420
8  0.5592698 0.7679268 0.4737353 0.20792690  0.076576583  0.025522489
9  0.5808038 0.8335977 0.5428700 0.25136273  0.097377187  0.034078461
10 0.6018050 0.9002031 0.6172700 0.30092443  0.122398817  0.044888911
11 0.6222945 0.9675425 0.6968454 0.35703345  0.152219146  0.058398832
12 0.6422923 1.0354260 0.7814646 0.42008621  0.187451666  0.075112329
13 0.6618169 1.1036746 0.8709558 0.49044634  0.228741488  0.095595855
14 0.6808860 1.1721202 0.9651089 0.56843674  0.276759790  0.120480780
15 0.6995163 1.2406064 1.0636784 0.65433173  0.332196793  0.150465074
16 0.7177237 1.3089879 1.1663871 0.74834949  0.395753182  0.186313826
17 0.7355232 1.3771311 1.2729294 0.85064502  0.468129925  0.228858309
18 0.7529290 1.4449133 1.3829757 0.96130392  0.550016503  0.278993235
19 0.7699546 1.5122228 1.4961769 1.08033715  0.642077639  0.337671879
20 0.7866130 1.5789585 1.6121688 1.20767714  0.744938705  0.405898680
21 0.8029164 1.6450294 1.7305769 1.34317531  0.859170050  0.484719002
22 0.8188765 1.7103542 1.8510208 1.48660130  0.985270656  0.575205723
23 0.8345045 1.7748609 1.9731188 1.63764387  1.123651556  0.678442439
24 0.8498111 1.8384862 2.0964919 1.79591372  1.274619609  0.795503153
25 0.8648064 1.9011751 2.2207679 1.96094791  1.438362255  0.927428488
26 0.8795002 1.9628803 2.3455846 2.13221615  1.614933954  1.075198658
27 0.8939018 2.0235614 2.4705933 2.30912840  1.804245003  1.239703686
28 0.9080201 2.0831850 2.5954611 2.49104390  2.006053409  1.421711601
29 0.9218637 2.1417236 2.7198730 2.67728112  2.219960405  1.621835661
30 0.9354408 2.1991554 2.8435344 2.86712839  2.445410079  1.840501924
31 0.9487592 2.2554640 2.9661714 3.05985490  2.681693393  2.077918700
32 0.9618265 2.3106373 3.0875325 3.25472171  2.927956686  2.334049617
33 0.9746499 2.3646678 3.2073887 3.45099243  3.183214503  2.608592073
34 0.9872363 2.4175519 3.3255337 3.64794332  3.446366377  2.900962772
35 0.9995926 2.4692891 3.4417838 3.84487254  3.716216975  3.210291812
36 1.0117250 2.5198825 3.5559775 4.04110839  3.991498831  3.535426419
37 1.0236397 2.5693377 3.6679748 4.23601628  4.270896765  3.874944874
38 1.0353429 2.6176629 3.7776562 4.42900449  4.553073026  4.227180588
39 1.0468400 2.6648684 3.8849220 4.61952864  4.836692180  4.590255592
40 1.0581368 2.7109666 3.9896909 4.80709486  5.120444816  4.962122069
41 1.0692384 2.7559712 4.0918988 4.99126165  5.403069294  5.340610015
42 1.0801501 2.7998977 4.1914979 5.17164074  5.683370849  5.723478697
43 1.0908767 2.8427626 4.2884548 5.34789684  5.960237607  6.108469362
44 1.1014231 2.8845837 4.3827500 5.51974652  6.232653221  6.493356680
45 1.1117939 2.9253793 4.4743759 5.68695636  6.499706027  6.875996564
46 1.1219935 2.9651688 4.5633359 5.84934050  6.760594802  7.254368417
47 1.1320261 3.0039720 4.6496435 6.00675769  7.014631321  7.626610337
48 1.1418960 3.0418090 4.7333206 6.15910807  7.261240043  7.991046359
49 1.1516072 3.0787005 4.8143969 6.30632969  7.499955310  8.346205389
50 1.1611635 3.1146673 4.8929085 6.44839494  7.730416496  8.690831989
51 1.1705686 3.1497303 4.9688974 6.58530694  7.952361548  9.023889592
52 1.1798263 3.1839105 5.0424103 6.71709603  8.165619358  9.344557057
53 1.1889400 3.2172289 5.1134981 6.84381633  8.370101351  9.652219675
54 1.1979131 3.2497065 5.1822147 6.96554245  8.565792666  9.946455808
55 1.2067489 3.2813640 5.2486171 7.08236645  8.752743212 10.227020389
56 1.2154506 3.3122221 5.3127640 7.19439500  8.931058878 10.493826388
57 1.2240212 3.3423011 5.3747158 7.30174670  9.100893066 10.746925250
58 1.2324638 3.3716211 5.4345339 7.40454975  9.262438714 10.986487155
59 1.2407813 3.4002020 5.4922806 7.50293977  9.415920904 11.212781778
60 1.2489765 3.4280633 5.5480182 7.59705787  9.561590121 11.426160043
61 1.2570520 3.4552242 5.6018090 7.68704898  9.699716189 11.627037263
62 1.2650106 3.4817035 5.6537151 7.77306034  9.830582895 11.815877858
63 1.2728548 3.5075196 5.7037981 7.85524021  9.954483283 11.993181786
64 1.2805871 3.5326907 5.7521187 7.93373674 10.071715585 12.159472707
65 1.2882099 3.5572344 5.7987367 8.00869705 10.182579753 12.315287830
66 1.2957256 3.5811679 5.8437108 8.08026643 10.287374540 12.461169370
67 1.3031364 3.6045083 5.8870986 8.14858763 10.386395082 12.597657470
68 1.3104446 3.6272718 5.9289563 8.21380039 10.479930927 12.725284466
69 1.3176522 3.6494746 5.9693387 8.27604096 10.568264464 12.844570334
70 1.3247615 3.6711323 6.0082993 8.33544174 10.651669695 12.956019176
71 1.3317744 3.6922603 6.0458901 8.39213108 10.730411313 13.060116605
72 1.3386928 3.7128732 6.0821613 8.44623304 10.804744032 13.157327875
73 1.3455189 3.7329857 6.1171619 8.49786728 10.874912143 13.248096665
74 1.3522543 3.7526117 6.1509392 8.54714901 10.941149254 13.332844372
75 1.3589009 3.7717648 6.1835391 8.59418890 11.003678179 13.411969848
76 1.3654605 3.7904585 6.2150058 8.63909317 11.062710957 13.485849465
77 1.3719348 3.8087055 6.2453821 8.68196354 11.118448970 13.554837461
              6            7            8            9           10
0  2.353232e-04 4.291480e-05 7.573634e-06 1.302665e-06 2.194650e-07
1  4.084110e-04 8.043498e-05 1.532920e-05 2.847123e-06 5.179447e-07
2  6.806280e-04 1.439714e-04 2.946754e-05 5.877699e-06 1.148283e-06
3  1.095279e-03 2.476528e-04 5.417994e-05 1.155087e-05 2.411898e-06
4  1.709600e-03 4.114897e-04 9.582421e-05 2.174495e-05 4.832817e-06
5  2.597866e-03 6.631858e-04 1.637868e-04 3.941631e-05 9.290163e-06
6  3.854905e-03 1.040336e-03 2.715995e-04 6.909145e-05 1.721320e-05
7  5.600064e-03 1.593064e-03 4.383640e-04 1.175335e-04 3.086191e-05
8  7.981617e-03 2.387150e-03 6.905413e-04 1.946295e-04 5.372221e-05
9  1.118164e-02 3.507701e-03 1.064175e-03 3.145530e-04 9.105257e-05
10 1.542134e-02 5.063429e-03 1.607620e-03 4.972672e-04 1.506275e-04
11 2.096685e-02 7.191575e-03 2.384852e-03 7.704422e-04 2.437336e-04
12 2.813543e-02 1.006354e-02 3.479460e-03 1.171875e-03 3.864862e-04
13 3.730205e-02 1.389130e-02 4.999392e-03 1.752508e-03 6.015476e-04
14 4.890626e-02 1.893454e-02 7.082575e-03 2.580164e-03 9.203447e-04
15 6.345929e-02 2.550873e-02 9.903504e-03 3.744116e-03 1.385900e-03
16 8.155118e-02 3.399390e-02 1.368090e-02 5.360642e-03 2.056414e-03
17 1.038577e-01 4.484434e-02 1.868655e-02 7.579710e-03 3.009745e-03
18 1.311469e-01 5.859895e-02 2.525543e-02 1.059297e-02 4.348986e-03
19 1.642851e-01 7.589237e-02 3.379714e-02 1.464324e-02 6.209325e-03
20 2.042414e-01 9.746645e-02 4.480884e-02 2.003564e-02 8.766435e-03
21 2.520905e-01 1.241821e-01 5.888955e-02 2.715060e-02 1.224665e-02
22 3.090140e-01 1.570309e-01 7.675585e-02 3.645895e-02 1.693920e-02
23 3.762980e-01 1.971462e-01 9.925889e-02 4.853913e-02 2.321086e-02
24 4.553273e-01 2.458129e-01 1.274025e-01 6.409684e-02 3.152329e-02
25 5.475756e-01 3.044753e-01 1.623618e-01 8.398703e-02 4.245339e-02
26 6.545896e-01 3.747418e-01 2.055024e-01 1.092382e-01 5.671702e-02
27 7.779681e-01 4.583853e-01 2.583982e-01 1.410789e-01 7.519642e-02
28 9.193335e-01 5.573384e-01 3.228479e-01 1.809661e-01 9.897128e-02
29 1.080297e+00 6.736809e-01 4.008887e-01 2.306143e-01 1.293538e-01
30 1.262416e+00 8.096181e-01 4.948036e-01 2.920247e-01 1.679275e-01
31 1.467147e+00 9.674500e-01 6.071231e-01 3.675132e-01 2.165888e-01
32 1.695785e+00 1.149526e+00 7.406153e-01 4.597339e-01 2.775911e-01
33 1.949412e+00 1.358191e+00 8.982639e-01 5.716961e-01 3.535893e-01
34 2.228830e+00 1.595708e+00 1.083229e+00 7.067711e-01 4.476823e-01
35 2.534505e+00 1.864183e+00 1.298790e+00 8.686832e-01 5.634491e-01
36 2.866506e+00 2.165462e+00 1.548262e+00 1.061481e+00 7.049754e-01
37 3.224467e+00 2.501028e+00 1.834894e+00 1.289481e+00 8.768615e-01
38 3.607544e+00 2.871897e+00 2.161736e+00 1.557179e+00 1.084206e+00
39 4.014406e+00 3.278509e+00 2.531485e+00 1.869124e+00 1.332553e+00
40 4.443231e+00 3.720635e+00 2.946318e+00 2.229748e+00 1.627794e+00
41 4.891735e+00 4.197303e+00 3.407708e+00 2.643156e+00 1.976012e+00
42 5.357212e+00 4.706751e+00 3.916248e+00 3.112873e+00 2.383261e+00
43 5.836603e+00 5.246414e+00 4.471486e+00 3.641564e+00 2.855273e+00
44 6.326578e+00 5.812954e+00 5.071808e+00 4.230742e+00 3.397096e+00
45 6.823629e+00 6.402335e+00 5.714356e+00 4.880491e+00 4.012674e+00
46 7.324171e+00 7.009929e+00 6.395027e+00 5.589224e+00 4.704395e+00
47 7.824644e+00 7.630668e+00 7.108539e+00 6.353524e+00 5.472649e+00
48 8.321610e+00 8.259212e+00 7.848581e+00 7.168092e+00 6.315438e+00
49 8.811838e+00 8.890137e+00 8.608034e+00 8.025815e+00 7.228113e+00
50 9.292377e+00 9.518112e+00 9.379242e+00 8.917982e+00 8.203275e+00
51 9.760608e+00 1.013807e+01 1.015433e+01 9.834624e+00 9.230903e+00
52 1.021428e+01 1.074537e+01 1.092551e+01 1.076496e+01 1.029870e+01
53 1.065154e+01 1.133589e+01 1.168539e+01 1.169791e+01 1.139268e+01
54 1.107091e+01 1.190610e+01 1.242722e+01 1.262261e+01 1.249787e+01
55 1.147130e+01 1.245315e+01 1.314512e+01 1.352888e+01 1.359916e+01
56 1.185198e+01 1.297481e+01 1.383416e+01 1.440765e+01 1.468208e+01
57 1.221254e+01 1.346951e+01 1.449048e+01 1.525124e+01 1.573352e+01
58 1.255285e+01 1.393629e+01 1.511125e+01 1.605353e+01 1.674227e+01
59 1.287306e+01 1.437468e+01 1.569463e+01 1.680999e+01 1.769937e+01
60 1.317350e+01 1.478472e+01 1.623969e+01 1.751769e+01 1.859823e+01
61 1.345468e+01 1.516681e+01 1.674631e+01 1.817509e+01 1.943460e+01
62 1.371725e+01 1.552170e+01 1.721501e+01 1.878193e+01 2.020637e+01
63 1.396195e+01 1.585035e+01 1.764685e+01 1.933895e+01 2.091326e+01
64 1.418962e+01 1.615393e+01 1.804329e+01 1.984776e+01 2.155654e+01
65 1.440112e+01 1.643373e+01 1.840611e+01 2.031054e+01 2.213863e+01
66 1.459735e+01 1.669113e+01 1.873725e+01 2.072992e+01 2.266279e+01
67 1.477920e+01 1.692754e+01 1.903880e+01 2.110877e+01 2.313284e+01
68 1.494759e+01 1.714436e+01 1.931287e+01 2.145013e+01 2.355289e+01
69 1.510339e+01 1.734301e+01 1.956156e+01 2.175702e+01 2.392720e+01
70 1.524745e+01 1.752482e+01 1.978693e+01 2.203245e+01 2.425996e+01
71 1.538059e+01 1.769112e+01 1.999095e+01 2.227927e+01 2.455522e+01
72 1.550360e+01 1.784313e+01 2.017550e+01 2.250023e+01 2.481682e+01
73 1.561721e+01 1.798203e+01 2.034233e+01 2.269785e+01 2.504835e+01
74 1.572213e+01 1.810892e+01 2.049308e+01 2.287452e+01 2.525311e+01
75 1.581903e+01 1.822481e+01 2.062927e+01 2.303238e+01 2.543408e+01
76 1.590850e+01 1.833065e+01 2.075229e+01 2.317341e+01 2.559400e+01
77 1.599113e+01 1.842732e+01 2.086341e+01 2.329940e+01 2.573529e+01
             11           12           13           14
0  3.634927e-08 5.935097e-09 9.574002e-10 1.528371e-10
1  9.262912e-08 1.633071e-08 2.844389e-09 4.902719e-10
2  2.205306e-07 4.175175e-08 7.809107e-09 1.445397e-09
3  4.950774e-07 1.001768e-07 2.002521e-08 3.961340e-09
4  1.055858e-06 2.273971e-07 4.838112e-08 1.018635e-08
5  2.152423e-06 4.915885e-07 1.109133e-07 2.476360e-08
6  4.215515e-06 1.017665e-06 2.426966e-07 5.727540e-08
7  7.965816e-06 2.026746e-06 5.094127e-07 1.267020e-07
8  1.457607e-05 3.898389e-06 1.029979e-06 2.692856e-07
9  2.590759e-05 7.266357e-06 2.013272e-06 5.519854e-07
10 4.484873e-05 1.316278e-05 3.816271e-06 1.094884e-06
11 7.579086e-05 2.323093e-05 7.034095e-06 2.107587e-06
12 1.252872e-04 4.003359e-05 1.263665e-05 3.947057e-06
13 2.029517e-04 6.749274e-05 2.217220e-05 7.207640e-06
14 3.226695e-04 1.115072e-04 3.806561e-05 1.285860e-05
15 5.042065e-04 1.808079e-04 6.404849e-05 2.245071e-05
16 7.753267e-04 2.881281e-04 1.057709e-04 3.842153e-05
17 1.174548e-03 4.517844e-04 1.716595e-04 6.454023e-05
18 1.754694e-03 6.977905e-04 2.741072e-04 1.065467e-04
19 2.587432e-03 1.062654e-03 4.311033e-04 1.730581e-04
20 3.769015e-03 1.597042e-03 6.684429e-04 2.768409e-04
21 5.427500e-03 2.370539e-03 1.022693e-03 4.365731e-04
22 7.731736e-03 3.477780e-03 1.545135e-03 6.792647e-04
23 1.090248e-02 5.046271e-03 2.306962e-03 1.043546e-03
24 1.522607e-02 7.246318e-03 3.406067e-03 1.584094e-03
25 2.107099e-02 1.030350e-02 4.975844e-03 2.377546e-03
26 2.890803e-02 1.451422e-02 7.196504e-03 3.530319e-03
27 3.933438e-02 2.026507e-02 1.030953e-02 5.188888e-03
28 5.310226e-02 2.805647e-02 1.463597e-02 7.553171e-03
29 7.115270e-02 3.853171e-02 2.059947e-02 1.089385e-02
30 9.465489e-02 5.251195e-02 2.875502e-02 1.557459e-02
31 1.250514e-01 7.103828e-02 3.982457e-02 2.208041e-02
32 1.641096e-01 9.542153e-02 5.474073e-02 3.105348e-02
33 2.139785e-01 1.273008e-01 7.470005e-02 4.333815e-02
34 2.772510e-01 1.687111e-01 1.012272e-01 6.003689e-02
35 3.570289e-01 2.221600e-01 1.362512e-01 8.257941e-02
36 4.569879e-01 2.907129e-01 1.821955e-01 1.128068e-01
37 5.814389e-01 3.780847e-01 2.420809e-01 1.530733e-01
38 7.353769e-01 4.887347e-01 3.196422e-01 2.063668e-01
39 9.245108e-01 6.279572e-01 4.194559e-01 2.764492e-01
40 1.155259e+00 8.019608e-01 5.470728e-01 3.680169e-01
41 1.434698e+00 1.017920e+00 7.091487e-01 4.868763e-01
42 1.770444e+00 1.283982e+00 9.135572e-01 6.401284e-01
43 2.170453e+00 1.609207e+00 1.169466e+00 8.363481e-01
44 2.642715e+00 2.003408e+00 1.487342e+00 1.085736e+00
45 3.194841e+00 2.476861e+00 1.878860e+00 1.400207e+00
46 3.833527e+00 3.039869e+00 2.356648e+00 1.793373e+00
47 4.563937e+00 3.702133e+00 2.933844e+00 2.280350e+00
48 5.389016e+00 4.471966e+00 3.623399e+00 2.877320e+00
49 6.308828e+00 5.355351e+00 4.437118e+00 3.600774e+00
50 7.319982e+00 6.354941e+00 5.384439e+00 4.466374e+00
51 8.415276e+00 7.469105e+00 6.471041e+00 5.487412e+00
52 9.583624e+00 8.691193e+00 7.697414e+00 6.672947e+00
53 1.081036e+01 1.000917e+01 9.057627e+00 8.025788e+00
54 1.207789e+01 1.140576e+01 1.053856e+01 9.540635e+00
55 1.336671e+01 1.285924e+01 1.211983e+01 1.120278e+01
56 1.465658e+01 1.434468e+01 1.377467e+01 1.298780e+01
57 1.592777e+01 1.583568e+01 1.547156e+01 1.486251e+01
58 1.716225e+01 1.730618e+01 1.717664e+01 1.678720e+01
59 1.834451e+01 1.873226e+01 1.885636e+01 1.871899e+01
60 1.946226e+01 2.009351e+01 2.048000e+01 2.061556e+01
61 2.050657e+01 2.137389e+01 2.202173e+01 2.243869e+01
62 2.147188e+01 2.256218e+01 2.346182e+01 2.415703e+01
63 2.235570e+01 2.365179e+01 2.478709e+01 2.574764e+01
64 2.315811e+01 2.464032e+01 2.599063e+01 2.719635e+01
65 2.388130e+01 2.552884e+01 2.707101e+01 2.849714e+01
66 2.452899e+01 2.632109e+01 2.803116e+01 2.965076e+01
67 2.510596e+01 2.702271e+01 2.887720e+01 3.066318e+01
68 2.561763e+01 2.764052e+01 2.961742e+01 3.154388e+01
69 2.606971e+01 2.818198e+01 3.026124e+01 3.230449e+01
70 2.646793e+01 2.865471e+01 3.081855e+01 3.295753e+01
71 2.681785e+01 2.906618e+01 3.129915e+01 3.351562e+01
72 2.712476e+01 2.942347e+01 3.171238e+01 3.399085e+01
73 2.739355e+01 2.973316e+01 3.206689e+01 3.439442e+01
74 2.762872e+01 3.000125e+01 3.237054e+01 3.473646e+01
75 2.783434e+01 3.023311e+01 3.263033e+01 3.502597e+01
76 2.801404e+01 3.043354e+01 3.285247e+01 3.527082e+01
77 2.817108e+01 3.060676e+01 3.304234e+01 3.547782e+01
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotDropoutRateHeterogeneity")
> ### * pnbd.PlotDropoutRateHeterogeneity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotDropoutRateHeterogeneity
> ### Title: Pareto/NBD Plot Dropout Rate Heterogeneity
> ### Aliases: pnbd.PlotDropoutRateHeterogeneity
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> pnbd.PlotDropoutRateHeterogeneity(params)
              [,1]         [,2]         [,3]         [,4]        [,5]
x.axis.ticks     0  0.003153792  0.006307583  0.009461375  0.01261517
heterogeneity  Inf 27.759092104 20.420226327 16.805132923 14.48014252
                     [,6]        [,7]        [,8]       [,9]      [,10]
x.axis.ticks   0.01576896  0.01892275  0.02207654 0.02523033 0.02838412
heterogeneity 12.79484187 11.48712187 10.42699037 9.54111444 8.78428895
                   [,11]      [,12]     [,13]      [,14]      [,15]      [,16]
x.axis.ticks  0.03153792 0.03469171 0.0378455 0.04099929 0.04415308 0.04730687
heterogeneity 8.12677401 7.54800237 7.0331759 6.57129934 6.15398192 5.77467505
                   [,17]      [,18]      [,19]      [,20]      [,21]      [,22]
x.axis.ticks  0.05046066 0.05361446 0.05676825 0.05992204 0.06307583 0.06622962
heterogeneity 5.42816875 5.11024881 4.81745692 4.54691886 4.29621891 4.06330635
                   [,23]     [,24]    [,25]      [,26]      [,27]      [,28]
x.axis.ticks  0.06938341 0.0725372 0.075691 0.07884479 0.08199858 0.08515237
heterogeneity 3.84642473 3.6440575 3.454886 3.27775475 3.11164787 2.95566476
                   [,29]      [,30]      [,31]      [,32]     [,33]     [,34]
x.axis.ticks  0.08830616 0.09145995 0.09461375 0.09776754 0.1009213 0.1040751
heterogeneity 2.80900428 2.67095030 2.54085995 2.41815396 2.3023085 2.1928481
                  [,35]     [,36]     [,37]     [,38]     [,39]     [,40]
x.axis.ticks  0.1072289 0.1103827 0.1135365 0.1166903 0.1198441 0.1229979
heterogeneity 2.0893404 1.9913905 1.8986372 1.8107491 1.7274216 1.6483740
                  [,41]     [,42]     [,43]    [,44]     [,45]     [,46]
x.axis.ticks  0.1261517 0.1293055 0.1324592 0.135613 0.1387668 0.1419206
heterogeneity 1.5733471 1.5021013 1.4344146 1.370081 1.3089087 1.2507198
                  [,47]     [,48]    [,49]     [,50]     [,51]     [,52]
x.axis.ticks  0.1450744 0.1482282 0.151382 0.1545358 0.1576896 0.1608434
heterogeneity 1.1953479 1.1426381 1.092446 1.0446346 0.9990784 0.9556579
                  [,53]     [,54]     [,55]     [,56]     [,57]     [,58]
x.axis.ticks  0.1639972 0.1671510 0.1703047 0.1734585 0.1766123 0.1797661
heterogeneity 0.9142617 0.8747848 0.8371287 0.8012008 0.7669137 0.7341852
                  [,59]     [,60]     [,61]     [,62]     [,63]     [,64]
x.axis.ticks  0.1829199 0.1860737 0.1892275 0.1923813 0.1955351 0.1986889
heterogeneity 0.7029378 0.6730983 0.6445977 0.6173709 0.5913560 0.5664948
                  [,65]     [,66]     [,67]     [,68]     [,69]     [,70]
x.axis.ticks  0.2018427 0.2049964 0.2081502 0.2113040 0.2144578 0.2176116
heterogeneity 0.5427321 0.5200158 0.4982962 0.4775266 0.4576624 0.4386615
                  [,71]     [,72]     [,73]     [,74]     [,75]     [,76]
x.axis.ticks  0.2207654 0.2239192 0.2270730 0.2302268 0.2333806 0.2365344
heterogeneity 0.4204840 0.4030918 0.3864488 0.3705209 0.3552755 0.3406817
                  [,77]     [,78]     [,79]     [,80]     [,81]     [,82]
x.axis.ticks  0.2396882 0.2428419 0.2459957 0.2491495 0.2523033 0.2554571
heterogeneity 0.3267099 0.3133324 0.3005223 0.2882545 0.2765047 0.2652500
                  [,83]     [,84]     [,85]     [,86]     [,87]     [,88]
x.axis.ticks  0.2586109 0.2617647 0.2649185 0.2680723 0.2712261 0.2743799
heterogeneity 0.2544686 0.2441395 0.2342430 0.2247601 0.2156727 0.2069636
                  [,89]     [,90]     [,91]     [,92]     [,93]     [,94]
x.axis.ticks  0.2775337 0.2806874 0.2838412 0.2869950 0.2901488 0.2933026
heterogeneity 0.1986165 0.1906156 0.1829460 0.1755935 0.1685444 0.1617857
                  [,95]     [,96]    [,97]     [,98]     [,99]    [,100]
x.axis.ticks  0.2964564 0.2996102 0.302764 0.3059178 0.3090716 0.3122254
heterogeneity 0.1553051 0.1490906 0.143131 0.1374154 0.1319336 0.1266755
> params <- c(0.55, 10.56, 3, 11.64)
> pnbd.PlotDropoutRateHeterogeneity(params)
              [,1]        [,2]      [,3]       [,4]      [,5]       [,6]
x.axis.ticks     0 0.007294549 0.0145891 0.02188365 0.0291782 0.03647275
heterogeneity    0 0.038543448 0.1416235 0.29271329 0.4780184 0.68610298
                   [,7]       [,8]       [,9]      [,10]      [,11]      [,12]
x.axis.ticks  0.0437673 0.05106185 0.05835639 0.06565094 0.07294549 0.08024004
heterogeneity 0.9075624 1.13473577 1.36145509 1.58282554 1.79503414 1.99518315
                   [,13]      [,14]     [,15]     [,16]     [,17]     [,18]
x.axis.ticks  0.08753459 0.09482914 0.1021237 0.1094182 0.1167128 0.1240073
heterogeneity 2.18114517 2.35143765 2.5051141 2.6416705 2.7609642 2.8631450
                  [,19]     [,20]    [,21]     [,22]     [,23]     [,24]
x.axis.ticks  0.1313019 0.1385964 0.145891 0.1531855 0.1604801 0.1677746
heterogeneity 2.9485954 3.0178807 3.071705 3.1108768 3.1362760 3.1488304
                  [,25]     [,26]     [,27]     [,28]     [,29]     [,30]
x.axis.ticks  0.1750692 0.1823637 0.1896583 0.1969528 0.2042474 0.2115419
heterogeneity 3.1494938 3.1392289 3.1189926 3.0897252 3.0523412 3.0077220
                  [,31]    [,32]     [,33]     [,34]     [,35]     [,36]
x.axis.ticks  0.2188365 0.226131 0.2334256 0.2407201 0.2480147 0.2553092
heterogeneity 2.9567111 2.900110 2.8386752 2.7731177 2.7041012 2.6322424
                  [,37]     [,38]     [,39]     [,40]    [,41]     [,42]
x.axis.ticks  0.2626038 0.2698983 0.2771929 0.2844874 0.291782 0.2990765
heterogeneity 2.5581116 2.4822334 2.4050884 2.3271144 2.248709 2.1702292
                  [,43]     [,44]     [,45]     [,46]     [,47]     [,48]
x.axis.ticks  0.3063711 0.3136656 0.3209602 0.3282547 0.3355493 0.3428438
heterogeneity 2.0919975 2.0143001 1.9373911 1.8614941 1.7868042 1.7134905
                  [,49]     [,50]     [,51]    [,52]     [,53]     [,54]
x.axis.ticks  0.3501384 0.3574329 0.3647275 0.372022 0.3793166 0.3866111
heterogeneity 1.6416976 1.5715475 1.5031421 1.436564 1.3718799 1.3091392
                  [,55]     [,56]     [,57]     [,58]     [,59]     [,60]
x.axis.ticks  0.3939057 0.4012002 0.4084948 0.4157893 0.4230839 0.4303784
heterogeneity 1.2483785 1.1896216 1.1328807 1.0781583 1.0254477 0.9747342
                  [,61]     [,62]     [,63]     [,64]     [,65]     [,66]
x.axis.ticks  0.4376730 0.4449675 0.4522621 0.4595566 0.4668512 0.4741457
heterogeneity 0.9259966 0.8792072 0.8343334 0.7913380 0.7501801 0.7108157
                  [,67]     [,68]     [,69]     [,70]     [,71]     [,72]
x.axis.ticks  0.4814403 0.4887348 0.4960294 0.5033239 0.5106185 0.5179130
heterogeneity 0.6731980 0.6372785 0.6030067 0.5703313 0.5391999 0.5095597
                  [,73]     [,74]     [,75]     [,76]     [,77]     [,78]
x.axis.ticks  0.5252076 0.5325021 0.5397967 0.5470912 0.5543858 0.5616803
heterogeneity 0.4813579 0.4545414 0.4290579 0.4048551 0.3818818 0.3600874
                  [,79]     [,80]     [,81]     [,82]     [,83]     [,84]
x.axis.ticks  0.5689749 0.5762694 0.5835639 0.5908585 0.5981530 0.6054476
heterogeneity 0.3394223 0.3198380 0.3012871 0.2837235 0.2671023 0.2513800
                  [,85]     [,86]     [,87]     [,88]     [,89]     [,90]
x.axis.ticks  0.6127421 0.6200367 0.6273312 0.6346258 0.6419203 0.6492149
heterogeneity 0.2365145 0.2224651 0.2091922 0.1966581 0.1848261 0.1736612
                  [,91]     [,92]     [,93]     [,94]     [,95]     [,96]
x.axis.ticks  0.6565094 0.6638040 0.6710985 0.6783931 0.6856876 0.6929822
heterogeneity 0.1631295 0.1531986 0.1438376 0.1350166 0.1267074 0.1188825
                  [,97]     [,98]      [,99]     [,100]
x.axis.ticks  0.7002767 0.7075713 0.71486584 0.72216039
heterogeneity 0.1115162 0.1045836 0.09806115 0.09192633
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotFreqVsConditionalExpectedFrequency")
> ### * pnbd.PlotFreqVsConditionalExpectedFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotFreqVsConditionalExpectedFrequency
> ### Title: Pareto/NBD Plot Frequency vs. Conditional Expected Frequency
> ### Aliases: pnbd.PlotFreqVsConditionalExpectedFrequency
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # number of transactions by each customer in the 39 weeks
> # following the calibration period
> x.star <- cal.cbs[,"x.star"]
> 
> # parameters estimated using pnbd.EstimateParameters
> est.params <- cdnowSummary$est.params
> # the maximum censor number that can be used
> max(cal.cbs[,"x"])
[1] 29
> 
> # plot conditional expected holdout period frequencies,
> # binned according to calibration period frequencies
> pnbd.PlotFreqVsConditionalExpectedFrequency(est.params, T.star=39, cal.cbs, x.star, censor=7)
                           freq.0      freq.1     freq.2     freq.3    freq.4
transaction.actual      0.2367116   0.6970387   1.392523   1.560000  2.532258
transaction.expected    0.1384196   0.5994406   1.195803   1.713798  2.398252
bin.size             1411.0000000 439.0000000 214.000000 100.000000 62.000000
                        freq.5    freq.6   freq.7+
transaction.actual    2.947368  3.862069  6.359375
transaction.expected  2.907130  3.818457  6.402879
bin.size             38.000000 29.000000 64.000000
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotFrequencyInCalibration")
> ### * pnbd.PlotFrequencyInCalibration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotFrequencyInCalibration
> ### Title: Pareto/NBD Plot Frequency in Calibration Period
> ### Aliases: pnbd.PlotFrequencyInCalibration
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # parameters estimated using pnbd.EstimateParameters
> est.params <- cdnowSummary$est.params
> # the maximum censor number that can be used
> max(cal.cbs[,"x"])
[1] 29
> 
> pnbd.PlotFrequencyInCalibration(est.params, cal.cbs, censor=7)
               freq.0   freq.1   freq.2   freq.3   freq.4   freq.5   freq.6
n.x.actual   1411.000 439.0000 214.0000 100.0000 62.00000 38.00000 29.00000
n.x.expected 1434.131 396.8776 193.4804 111.7994 69.97922 45.84658 30.92474
              freq.7+
n.x.actual   64.00000
n.x.expected 73.96139
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotRecVsConditionalExpectedFrequency")
> ### * pnbd.PlotRecVsConditionalExpectedFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotRecVsConditionalExpectedFrequency
> ### Title: Pareto/NBD Plot Actual vs. Conditional Expected Frequency by
> ###   Recency
> ### Aliases: pnbd.PlotRecVsConditionalExpectedFrequency
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # number of transactions by each customer in the 39 weeks following
> # the calibration period
> x.star <- cal.cbs[,"x.star"]
> 
> # parameters estimated using pnbd.EstimateParameters
> est.params <- cdnowSummary$est.params
> 
> # plot conditional expected holdout period transactions, binned according to
> # calibration period recencies
> pnbd.PlotRecVsConditionalExpectedFrequency(est.params, cal.cbs, T.star=39, x.star)
                 [,1]       [,2]       [,3]       [,4]       [,5]       [,6]
actual      0.2766731  0.6285714  0.7809524  0.6010204  0.5833333  0.6904762
expected    0.1907851  0.2299048  0.2710122  0.2892465  0.3116444  0.3256092
bin.size 1445.0000000 40.0000000 44.0000000 31.0000000 22.0000000 30.0000000
               [,7]       [,8]       [,9]      [,10]      [,11]      [,12]
actual    0.8054422  0.2023810  0.7948980  0.9611111  1.0555556  0.9693878
expected  0.4143249  0.4668769  0.5387695  0.6109809  0.6558861  0.7413273
bin.size 27.0000000 28.0000000 40.0000000 21.0000000 14.0000000 22.0000000
              [,13]      [,14]      [,15]     [,16]     [,17]     [,18]
actual    2.3690476  1.3750000  0.5000000  1.054422  1.304762  2.035714
expected  0.8313478  0.9670646  0.8225655  1.058675  1.025263  1.046216
bin.size 17.0000000 14.0000000 21.0000000 24.000000 24.000000 22.000000
             [,19]      [,20]     [,21]     [,22]      [,23]     [,24]
actual    1.011905  0.9642857  2.019048  1.092517  0.5456349  1.438095
expected  1.353765  1.3882538  1.511371  1.638133  1.4190959  2.811445
bin.size 23.000000 25.0000000 29.000000 36.000000 24.0000000 27.000000
             [,25]     [,26]     [,27]     [,28]     [,29]     [,30]     [,31]
actual    1.564286  2.539116  3.310544  1.126984  3.980556  4.157823  3.700000
expected  1.856454  2.388147  2.741580  2.113145  3.336182  3.230945  4.347411
bin.size 35.000000 34.000000 31.000000 27.000000 31.000000 26.000000 30.000000
             [,32]     [,33]     [,34]     [,35]    [,36]     [,37]    [,38]
actual    2.392857  5.119048  3.914286  4.083333 1.611111  3.166667 5.900000
expected  2.112533  3.761729  4.039571  4.495043 3.855785  2.823166 8.242071
bin.size 18.000000 17.000000 18.000000 13.000000 9.000000 11.000000 6.000000
            [,39]
actual   2.000000
expected 1.026201
bin.size 1.000000
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotTrackingCum")
> ### * pnbd.PlotTrackingCum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotTrackingCum
> ### Title: Pareto/NBD Tracking Cumulative Transactions Plot
> ### Aliases: pnbd.PlotTrackingCum
> 
> ### ** Examples
> 
> data(cdnowSummary)
> 
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # Cumulative repeat transactions made by all customers across calibration
> # and holdout periods
> cu.tracking <- cdnowSummary$cu.tracking
> 
> # parameters estimated using pnbd.EstimateParameters
> est.params <- cdnowSummary$est.params
> 
> # All parameters are in weeks; the calibration period lasted 39
> # weeks and the holdout period another 39.
> pnbd.PlotTrackingCum(est.params, T.cal=cal.cbs[,"T.cal"], T.tot=78, cu.tracking)
             [,1]    [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]
actual   0.000000 19.0000 42.00000 81.00000 119.0000 192.0000 261.0000 351.0000
expected 4.215113 16.5688 37.21244 66.71705 105.3846 153.7213 210.3875 275.3913
             [,9]    [,10]    [,11]    [,12]    [,13]    [,14]     [,15]
actual   428.0000 504.0000 610.0000 733.0000 828.0000 914.0000 1005.0000
expected 349.0343 431.0335 520.3519 615.9572 712.2999 805.3684  895.4503
             [,16]    [,17]    [,18]    [,19]    [,20]    [,21]    [,22]
actual   1078.0000 1149.000 1222.000 1286.000 1359.000 1414.000 1484.000
expected  982.7934 1067.613 1150.097 1230.412 1308.707 1385.111 1459.744
            [,23]   [,24]    [,25]    [,26]    [,27]    [,28]    [,29]    [,30]
actual   1517.000 1573.00 1672.000 1746.000 1800.000 1840.000 1885.000 1973.000
expected 1532.712 1604.11 1674.028 1742.543 1809.729 1875.654 1940.378 2003.958
            [,31]    [,32]    [,33]    [,34]    [,35]    [,36]    [,37]
actual   2032.000 2069.000 2132.000 2192.000 2239.000 2290.000 2342.000
expected 2066.447 2127.894 2188.343 2247.837 2306.415 2364.114 2420.967
            [,38]    [,39]    [,40]    [,41]    [,42]    [,43]    [,44]   [,45]
actual   2395.000 2457.000 2507.000 2563.000 2612.000 2671.000 2718.000 2803.00
expected 2477.008 2532.267 2586.771 2640.548 2693.624 2746.021 2797.763 2848.87
            [,46]    [,47]    [,48]    [,49]    [,50]    [,51]    [,52]
actual   2864.000 2923.000 2968.000 3038.000 3104.000 3153.000 3183.000
expected 2899.364 2949.264 2998.587 3047.351 3095.573 3143.268 3190.451
            [,53]   [,54]    [,55]    [,56]    [,57]    [,58]    [,59]    [,60]
actual   3234.000 3276.00 3329.000 3357.000 3404.000 3444.000 3490.000 3533.000
expected 3237.137 3283.34 3329.072 3374.346 3419.175 3463.568 3507.539 3551.096
            [,61]    [,62]   [,63]    [,64]    [,65]    [,66]    [,67]    [,68]
actual   3598.000 3677.000 3727.00 3786.000 3844.000 3879.000 3915.000 3962.000
expected 3594.251 3637.012 3679.39 3721.394 3763.031 3804.311 3845.241 3885.829
            [,69]   [,70]    [,71]   [,72]    [,73]    [,74]    [,75]    [,76]
actual   3991.000 4035.00 4077.000 4112.00 4141.000 4183.000 4231.000 4279.000
expected 3926.083 3966.01 4005.617 4044.91 4083.896 4122.582 4160.973 4199.076
            [,77]    [,78]
actual   4311.000 4339.000
expected 4236.895 4274.437
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotTrackingInc")
> ### * pnbd.PlotTrackingInc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotTrackingInc
> ### Title: Pareto/NBD Tracking Incremental Transactions Comparison
> ### Aliases: pnbd.PlotTrackingInc
> 
> ### ** Examples
> 
> data(cdnowSummary)
> cal.cbs <- cdnowSummary$cbs
> # cal.cbs already has column names required by method
> 
> # Cumulative repeat transactions made by all customers across calibration
> # and holdout periods
> cu.tracking <- cdnowSummary$cu.tracking
> # make the tracking data incremental
> inc.tracking <- dc.CumulativeToIncremental(cu.tracking)
> 
> # parameters estimated using pnbd.EstimateParameters
> est.params <- cdnowSummary$est.params
> 
> # All parameters are in weeks; the calibration period lasted 39
> # weeks and the holdout period another 39.
> pnbd.PlotTrackingInc(est.params, T.cal=cal.cbs[,"T.cal"], T.tot=78, inc.tracking)
             [,1]     [,2]     [,3]     [,4]     [,5]    [,6]     [,7]     [,8]
actual   0.000000 19.00000 23.00000 39.00000 38.00000 73.0000 69.00000 90.00000
expected 4.215113 12.35368 20.64364 29.50461 38.66758 48.3367 56.66617 65.00384
             [,9]    [,10]     [,11]     [,12]    [,13]    [,14]    [,15]
actual   77.00000 76.00000 106.00000 123.00000 95.00000 86.00000 91.00000
expected 73.64299 81.99913  89.31844  95.60529 96.34268 93.06853 90.08193
            [,16]    [,17]    [,18]    [,19]    [,20]    [,21]    [,22]
actual   73.00000 71.00000 73.00000 64.00000 73.00000 55.00000 70.00000
expected 87.34303 84.81939 82.48428 80.31542 78.29411 76.40445 74.63287
            [,23]    [,24]    [,25]    [,26]    [,27]    [,28]    [,29]
actual   33.00000 56.00000 99.00000 74.00000 54.00000 40.00000 45.00000
expected 72.96767 71.39874 69.91723 68.51544 67.18654 65.92452 64.72404
            [,30]    [,31]    [,32]    [,33]    [,34]    [,35]    [,36]
actual   88.00000 59.00000 37.00000 63.00000 60.00000 47.00000 51.00000
expected 63.58032 62.48909 61.44653 60.44919 59.49393 58.57793 57.69863
            [,37]    [,38]    [,39]    [,40]    [,41]    [,42]    [,43]
actual   52.00000 53.00000 62.00000 50.00000 56.00000 49.00000 59.00000
expected 56.85368 56.04094 55.25846 54.50443 53.77722 53.07529 52.39724
            [,44]   [,45]   [,46]    [,47]    [,48]    [,49]    [,50]   [,51]
actual   47.00000 85.0000 61.0000 59.00000 45.00000 70.00000 66.00000 49.0000
expected 51.74178 51.1077 50.4939 49.89933 49.32303 48.76411 48.22173 47.6951
            [,52]    [,53]    [,54]    [,55]   [,56]    [,57]    [,58]    [,59]
actual   30.00000 51.00000 42.00000 53.00000 28.0000 47.00000 40.00000 46.00000
expected 47.18349 46.68622 46.20265 45.73216 45.2742 44.82823 44.39375 43.97028
            [,60]    [,61]    [,62]    [,63]    [,64]    [,65]    [,66]
actual   43.00000 65.00000 79.00000 50.00000 59.00000 58.00000 35.00000
expected 43.55738 43.15462 42.76161 42.37797 42.00333 41.63736 41.27975
            [,67]    [,68]    [,69]    [,70]    [,71]    [,72]    [,73]
actual   36.00000 47.00000 29.00000 44.00000 42.00000 35.00000 29.00000
expected 40.93017 40.58835 40.25401 39.92688 39.60671 39.29328 38.98634
            [,74]    [,75]    [,76]    [,77]    [,78]
actual   42.00000 48.00000 48.00000 32.00000 28.00000
expected 38.68569 38.39112 38.10242 37.81942 37.54193
> 
> 
> 
> cleanEx()
> nameEx("pnbd.PlotTransactionRateHeterogeneity")
> ### * pnbd.PlotTransactionRateHeterogeneity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.PlotTransactionRateHeterogeneity
> ### Title: Pareto/NBD Plot Transaction Rate Heterogeneity
> ### Aliases: pnbd.PlotTransactionRateHeterogeneity
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> pnbd.PlotTransactionRateHeterogeneity(params)
              [,1]         [,2]         [,3]         [,4]       [,5]
x.axis.ticks     0  0.003314326  0.006628652  0.009942977  0.0132573
heterogeneity  Inf 28.520856984 20.160396932 16.220267705 13.7605436
                     [,6]        [,7]       [,8]       [,9]      [,10]
x.axis.ticks   0.01657163  0.01988595 0.02320028 0.02651461 0.02982893
heterogeneity 12.01783098 10.69041431 9.63093578 8.75733809 8.01961441
                   [,11]      [,12]      [,13]      [,14]      [,15]      [,16]
x.axis.ticks  0.03314326 0.03645758 0.03977191 0.04308624 0.04640056 0.04971489
heterogeneity 7.38520614 6.83181220 6.34353109 5.90864817 5.51829647 5.16560964
                   [,17]      [,18]      [,19]      [,20]      [,21]      [,22]
x.axis.ticks  0.05302921 0.05634354 0.05965786 0.06297219 0.06628652 0.06960084
heterogeneity 4.84516604 4.55261209 4.28440030 4.03760243 3.80977372 3.59885213
                   [,23]      [,24]      [,25]      [,26]      [,27]     [,28]
x.axis.ticks  0.07291517 0.07622949 0.07954382 0.08285814 0.08617247 0.0894868
heterogeneity 3.40308255 3.22095880 3.05117870 2.89260881 2.74425654 2.6052477
                   [,29]      [,30]      [,31]     [,32]     [,33]     [,34]
x.axis.ticks  0.09280112 0.09611545 0.09942977 0.1027441 0.1060584 0.1093728
heterogeneity 2.47480857 2.35225084 2.23695976 2.1283840 2.0260271 1.9294409
                  [,35]     [,36]     [,37]     [,38]     [,39]     [,40]
x.axis.ticks  0.1126871 0.1160014 0.1193157 0.1226301 0.1259444 0.1292587
heterogeneity 1.8382190 1.7519921 1.6704237 1.5932062 1.5200580 1.4507204
                 [,41]     [,42]     [,43]    [,44]     [,45]     [,46]
x.axis.ticks  0.132573 0.1358874 0.1392017 0.142516 0.1458303 0.1491447
heterogeneity 1.384955 1.3225438 1.2632829 1.206985 1.1534775 1.1025980
                 [,47]     [,48]     [,49]     [,50]     [,51]     [,52]
x.axis.ticks  0.152459 0.1557733 0.1590876 0.1624020 0.1657163 0.1690306
heterogeneity 1.054197 1.0081352 0.9642825 0.9225175 0.8827269 0.8448046
                  [,53]     [,54]     [,55]     [,56]     [,57]     [,58]
x.axis.ticks  0.1723449 0.1756593 0.1789736 0.1822879 0.1856022 0.1889166
heterogeneity 0.8086514 0.7741743 0.7412858 0.7099041 0.6799520 0.6513572
                  [,59]     [,60]     [,61]     [,62]     [,63]     [,64]
x.axis.ticks  0.1922309 0.1955452 0.1988595 0.2021739 0.2054882 0.2088025
heterogeneity 0.6240513 0.5979701 0.5730531 0.5492429 0.5264858 0.5047306
                  [,65]     [,66]     [,67]     [,68]     [,69]     [,70]
x.axis.ticks  0.2121169 0.2154312 0.2187455 0.2220598 0.2253742 0.2286885
heterogeneity 0.4839293 0.4640363 0.4450084 0.4268048 0.4093869 0.3927181
                  [,71]     [,72]     [,73]     [,74]     [,75]     [,76]
x.axis.ticks  0.2320028 0.2353171 0.2386315 0.2419458 0.2452601 0.2485744
heterogeneity 0.3767635 0.3614904 0.3468673 0.3328647 0.3194543 0.3066094
                  [,77]     [,78]     [,79]     [,80]     [,81]     [,82]
x.axis.ticks  0.2518888 0.2552031 0.2585174 0.2618317 0.2651461 0.2684604
heterogeneity 0.2943045 0.2825154 0.2712192 0.2603939 0.2500187 0.2400738
                  [,83]     [,84]     [,85]     [,86]     [,87]     [,88]
x.axis.ticks  0.2717747 0.2750890 0.2784034 0.2817177 0.2850320 0.2883463
heterogeneity 0.2305403 0.2214001 0.2126363 0.2042323 0.1961728 0.1884427
                  [,89]     [,90]     [,91]     [,92]     [,93]     [,94]
x.axis.ticks  0.2916607 0.2949750 0.2982893 0.3016036 0.3049180 0.3082323
heterogeneity 0.1810280 0.1739152 0.1670913 0.1605441 0.1542619 0.1482333
                  [,95]     [,96]     [,97]     [,98]     [,99]    [,100]
x.axis.ticks  0.3115466 0.3148609 0.3181753 0.3214896 0.3248039 0.3281183
heterogeneity 0.1424477 0.1368950 0.1315652 0.1264491 0.1215378 0.1168227
> params <- c(3, 10.56, 0.61, 11.64)
> pnbd.PlotTransactionRateHeterogeneity(params)
              [,1]        [,2]       [,3]       [,4]       [,5]       [,6]
x.axis.ticks     0 0.008040583 0.01608117 0.02412175 0.03216233 0.04020291
heterogeneity    0 0.034967252 0.12848315 0.26555432 0.43366616 0.62244394
                   [,7]       [,8]       [,9]      [,10]      [,11]      [,12]
x.axis.ticks  0.0482435 0.05628408 0.06432466 0.07236525 0.08040583 0.08844641
heterogeneity 0.8233556 1.02945101 1.23513452 1.43596544 1.62848458 1.81006306
                   [,13]     [,14]     [,15]     [,16]     [,17]     [,18]
x.axis.ticks  0.09648699 0.1045276 0.1125682 0.1206087 0.1286493 0.1366899
heterogeneity 1.97877088 2.1332630 2.2726809 2.3965671 2.5047923 2.5974923
                  [,19]     [,20]     [,21]     [,22]     [,23]     [,24]
x.axis.ticks  0.1447305 0.1527711 0.1608117 0.1688522 0.1768928 0.1849334
heterogeneity 2.6750144 2.7378711 2.7867017 2.8222388 2.8452813 2.8566709
                 [,25]     [,26]     [,27]     [,28]     [,29]     [,30]
x.axis.ticks  0.192974 0.2010146 0.2090552 0.2170957 0.2251363 0.2331769
heterogeneity 2.857273 2.8479602 2.8296015 2.8030497 2.7691343 2.7286550
                  [,31]     [,32]     [,33]     [,34]     [,35]     [,36]
x.axis.ticks  0.2412175 0.2492581 0.2572987 0.2653392 0.2733798 0.2814204
heterogeneity 2.6823771 2.6310275 2.5752930 2.5158181 2.4532052 2.3880137
                 [,37]     [,38]     [,39]     [,40]     [,41]     [,42]
x.axis.ticks  0.289461 0.2975016 0.3055421 0.3135827 0.3216233 0.3296639
heterogeneity 2.320761 2.2519231 2.1819358 2.1111966 2.0400656 1.9688677
                  [,43]     [,44]     [,45]     [,46]     [,47]     [,48]
x.axis.ticks  0.3377045 0.3457451 0.3537856 0.3618262 0.3698668 0.3779074
heterogeneity 1.8978946 1.8274063 1.7576331 1.6887781 1.6210183 1.5545069
                 [,49]     [,50]     [,51]     [,52]     [,53]     [,54]
x.axis.ticks  0.385948 0.3939886 0.4020291 0.4100697 0.4181103 0.4261509
heterogeneity 1.489375 1.4257338 1.3636753 1.3032749 1.2445921 1.1876727
                  [,55]     [,56]     [,57]     [,58]     [,59]     [,60]
x.axis.ticks  0.4341915 0.4422321 0.4502726 0.4583132 0.4663538 0.4743944
heterogeneity 1.1325496 1.0792443 1.0277681 0.9781230 0.9303030 0.8842950
                  [,61]     [,62]     [,63]     [,64]     [,65]     [,66]
x.axis.ticks  0.4824350 0.4904756 0.4985161 0.5065567 0.5145973 0.5226379
heterogeneity 0.8400794 0.7976313 0.7569210 0.7179149 0.6805758 0.6448637
                  [,67]     [,68]     [,69]     [,70]     [,71]     [,72]
x.axis.ticks  0.5306785 0.5387190 0.5467596 0.5548002 0.5628408 0.5708814
heterogeneity 0.6107364 0.5781496 0.5470577 0.5174140 0.4891710 0.4622810
                  [,73]     [,74]     [,75]     [,76]     [,77]     [,78]
x.axis.ticks  0.5789220 0.5869625 0.5950031 0.6030437 0.6110843 0.6191249
heterogeneity 0.4366958 0.4123675 0.3892484 0.3672913 0.3464495 0.3266772
                  [,79]     [,80]     [,81]     [,82]     [,83]     [,84]
x.axis.ticks  0.6271655 0.6352060 0.6432466 0.6512872 0.6593278 0.6673684
heterogeneity 0.3079295 0.2901623 0.2733326 0.2573986 0.2423196 0.2280561
                  [,85]     [,86]     [,87]     [,88]     [,89]     [,90]
x.axis.ticks  0.6754090 0.6834495 0.6914901 0.6995307 0.7075713 0.7156119
heterogeneity 0.2145699 0.2018240 0.1897826 0.1784115 0.1676773 0.1575483
                  [,91]     [,92]     [,93]     [,94]     [,95]     [,96]
x.axis.ticks  0.7236525 0.7316930 0.7397336 0.7477742 0.7558148 0.7638554
heterogeneity 0.1479937 0.1389843 0.1304918 0.1224893 0.1149510 0.1078522
                  [,97]      [,98]      [,99]     [,100]
x.axis.ticks  0.7718960 0.77993653 0.78797712 0.79601770
heterogeneity 0.1011693 0.09487997 0.08896269 0.08339708
> 
> 
> 
> cleanEx()
> nameEx("pnbd.compress.cbs")
> ### * pnbd.compress.cbs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.compress.cbs
> ### Title: Compress Customer-by-Sufficient-Statistic Matrix
> ### Aliases: pnbd.compress.cbs
> 
> ### ** Examples
> 
> # Create a sample customer-by-sufficient-statistic matrix:
> set.seed(7)
> x <- sample(1:4, 10, replace = TRUE)
> t.x <- sample(1:4, 10, replace = TRUE)
> T.cal <- rep(4, 10)
> ave.spend <- sample(10:20, 10, replace = TRUE)
> cbs <- cbind(x, t.x, T.cal, ave.spend)
> cbs
      x t.x T.cal ave.spend
 [1,] 4   1     4        17
 [2,] 2   1     4        13
 [3,] 1   4     4        20
 [4,] 1   1     4        19
 [5,] 1   2     4        20
 [6,] 4   1     4        10
 [7,] 2   3     4        16
 [8,] 4   1     4        15
 [9,] 1   4     4        20
[10,] 2   2     4        13
> 
> # If cbs is printed, you would note that the following
> # sets of rows have the same x, t.x and T.cal:
> # (1, 6, 8); (3, 9)
> 
> pnbd.compress.cbs(cbs, 0)   # No rounding necessary
Data reduced from 10 rows to 7 rows.
     x t.x T.cal ave.spend custs
[1,] 1   1     4        19     1
[2,] 2   1     4        13     1
[3,] 4   1     4        42     3
[4,] 1   2     4        20     1
[5,] 2   2     4        13     1
[6,] 2   3     4        16     1
[7,] 1   4     4        40     2
> 
> # Note that all additional columns (in this case, ave.spend)
> # are aggregated by sum.
> 
> 
> 
> cleanEx()
> nameEx("pnbd.pmf.General")
> ### * pnbd.pmf.General
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.pmf.General
> ### Title: Generalized Pareto/NBD Probability Mass Function
> ### Aliases: pnbd.pmf.General
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> # probability that a customer will make 10 repeat transactions in the
> # time interval (1,2]
> pnbd.pmf.General(params, t.start=1, t.end=2, x=10)
[1] 4.414629e-12
> # probability that a customer will make no repeat transactions in the
> # time interval (39,78]
> pnbd.pmf.General(params, t.start=39, t.end=78, x=0)
[1] 0.7924651
> 
> 
> 
> cleanEx()
> nameEx("pnbd.pmf")
> ### * pnbd.pmf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pnbd.pmf
> ### Title: Pareto/NBD Probability Mass Function
> ### Aliases: pnbd.pmf
> 
> ### ** Examples
> 
> params <- c(0.55, 10.56, 0.61, 11.64)
> # probability that a customer will make 10 repeat transactions in the
> # time interval (0,2]
> pnbd.pmf(params, t=2, x=10)
[1] 1.893708e-09
> # probability that a customer will make no repeat transactions in the
> # time interval (0,39]
> pnbd.pmf(params, t=39, x=0)
[1] 0.5959381
> 
> # Vectors may also be used as arguments:
> pnbd.pmf(params, t=30, x=11:20)
 [1] 1.889941e-03 1.332277e-03 9.432440e-04 6.702499e-04 4.777461e-04
 [6] 3.414425e-04 2.445944e-04 1.755737e-04 1.262564e-04 9.093735e-05
> 
> 
> 
> cleanEx()
> nameEx("spend.EstimateParameters")
> ### * spend.EstimateParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spend.EstimateParameters
> ### Title: Spend Parameter Estimation
> ### Aliases: spend.EstimateParameters
> 
> ### ** Examples
> 
> data(cdnowSummary)
> ave.spend <- cdnowSummary$m.x
> tot.trans <- cdnowSummary$cbs[,"x"]
> 
> # There will be many warnings due to the zeroes that are
> # included in the data above. To avoid them, use the following:
> # (see example for spend.LL)
> 
> ave.spend <- ave.spend[which(tot.trans > 0)]
> tot.trans <- tot.trans[which(tot.trans > 0)]
> 
> # We will let the spend function use default starting parameters
> spend.EstimateParameters(ave.spend, tot.trans)
[1]  6.249349  3.744256 15.444307
> 
> 
> 
> cleanEx()
> nameEx("spend.LL")
> ### * spend.LL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spend.LL
> ### Title: Spend Log-Likelihood
> ### Aliases: spend.LL
> 
> ### ** Examples
> 
> data(cdnowSummary)
> ave.spend <- cdnowSummary$m.x;
> tot.trans <- cdnowSummary$cbs[,"x"];
> params <- c(6.25, 3.74, 15.44);
> 
> # get the total log-likelihood of the data and parameters
> # above. There will be many warnings due to the zeroes that are
> # included in the data. If you wish to avoid these warnings, use:
> 
> # ave.spend <- ave.spend[which(tot.trans > 0)];
> # and
> # tot.trans <- tot.trans[which(tot.trans > 0)];
> 
> # Note that we used tot.trans to remove the zeroes from ave.spend.
> # This is because we need the vectors to be the same length, and it
> # is possible that your data include customers who made transactions
> # worth zero dollars (in which case the vector lengths would differ
> # if we used ave.spend to remove the zeroes from ave.spend).
> 
> sum(spend.LL(params, ave.spend, tot.trans))
Warning in spend.LL(params, ave.spend, tot.trans) :
  Customers with 0 transactions or 0 average spend in spend.LL
[1] -4055.919
> 
> # This log-likelihood may be different than mentioned in the
> # referenced paper; in the paper, a slightly different function
> # which relies on total spend (not average spend) is used.
> 
> 
> 
> cleanEx()
> nameEx("spend.expected.value")
> ### * spend.expected.value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spend.expected.value
> ### Title: Conditional expected transaction value
> ### Aliases: spend.expected.value
> 
> ### ** Examples
> 
> params <- c(6, 4, 16)
> # calculate the expected transaction value of a customer
> # who spent an average of $35 over 3 transactions.
> spend.expected.value(params, m.x=35, x=3)
[1] 34.57143
> 
> # m.x and x may be vectors:
> spend.expected.value(params, m.x=30:40, x=3)
 [1] 30.28571 31.14286 32.00000 32.85714 33.71429 34.57143 35.42857 36.28571
 [9] 37.14286 38.00000 38.85714
> spend.expected.value(params, m.x=35, x=1:10)
 [1] 34.00000 34.40000 34.57143 34.66667 34.72727 34.76923 34.80000 34.82353
 [9] 34.84211 34.85714
> spend.expected.value(params, m.x=30:40, x=1:11)
 [1] 30.66667 31.20000 32.00000 32.88889 33.81818 34.76923 35.73333 36.70588
 [9] 37.68421 38.66667 39.65217
> 
> 
> 
> cleanEx()
> nameEx("spend.marginal.likelihood")
> ### * spend.marginal.likelihood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spend.marginal.likelihood
> ### Title: Gamma-gamma marginal likelihood
> ### Aliases: spend.marginal.likelihood
> 
> ### ** Examples
> 
> params <- c(6, 4, 16)
> # calculate the marginal distribution of the average transaction value
> # of a customer who spent an average of $35 over 3 transactions.
> spend.marginal.likelihood(params, m.x=35, x=3)
[1] 0.01628041
> 
> # Several values can also be computed at once:
> spend.marginal.likelihood(params, m.x=30:40, x=3)
 [1] 0.02178306 0.02058508 0.01943300 0.01833037 0.01727922 0.01628041
 [7] 0.01533388 0.01443890 0.01359421 0.01279820 0.01204899
> spend.marginal.likelihood(params, m.x=35, x=1:10)
 [1] 0.01457300 0.01580541 0.01628041 0.01653229 0.01668839 0.01679462
 [7] 0.01687158 0.01692991 0.01697564 0.01701246
> spend.marginal.likelihood(params, m.x=30:40, x=1:11)
 [1] 0.01892075 0.01983798 0.01943300 0.01865303 0.01774288 0.01679462
 [7] 0.01585007 0.01493027 0.01404619 0.01320346 0.01240461
> 
> 
> 
> cleanEx()
> nameEx("spend.plot.average.transaction.value")
> ### * spend.plot.average.transaction.value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spend.plot.average.transaction.value
> ### Title: Plot Actual vs. Expected Average Transaction Value
> ### Aliases: spend.plot.average.transaction.value
> 
> ### ** Examples
> 
> data(cdnowSummary)
> ave.spend <- cdnowSummary$m.x
> tot.trans <- cdnowSummary$cbs[,"x"]
> params <- c(6.25, 3.74, 15.44)
> 
> # Plot the actual and expected average transaction value across customers.
> f.m.x <- spend.plot.average.transaction.value(params, ave.spend, tot.trans)
Warning in spend.plot.average.transaction.value(params, ave.spend, tot.trans) :
  Customers with 0 transactions or 0 average spend in spend.plot.average.transaction.value have been removed before plotting.
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  36.342 5.402 41.75 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
